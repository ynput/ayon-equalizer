{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"3DEqualizer AYON Addon","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>This is addon providing integration of 3DEqualizer4 from Science-D-Vision into AYON.</p> <p>Integration includes:</p> <ul> <li>Workfiles</li> <li>Loading plates (cameras)</li> <li>Publishing scripts to Maya and Nuke</li> <li>Publishing of lens data</li> </ul>"},{"location":"index.html#building-and-installing","title":"Building and Installing","text":"<p>Run <code>python create_package.py</code> in the root of the repository and upload resulting zip file to your AYON instance.</p>"},{"location":"index.html#notes","title":"Notes","text":"<p>This integration is installing PySide2 into 3DEqualizer environment as it doesn't ship with Qt support. This comes with some price - to make Qt UI work with 3DEqualizer, <code>processEvent()</code> is periodically called. This is not optimal and it might create some issues, like 3Dequalizer crashing or UI lags.</p> <p>For extraction, it is using 3de4 native scripts, but since they are depending on some UI, there are few hacks around it but this is better than rewriting the whole export logic to publishing plugins.</p>"},{"location":"license.html","title":"License","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li> <p>Definitions.</p> <p>\"License\" shall mean the terms and conditions for use, reproduction,   and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by   the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all   other entities that control, are controlled by, or are under common   control with that entity. For the purposes of this definition,   \"control\" means (i) the power, direct or indirect, to cause the   direction or management of such entity, whether by contract or   otherwise, or (ii) ownership of fifty percent (50%) or more of the   outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity   exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,   including but not limited to software source code, documentation   source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical   transformation or translation of a Source form, including but   not limited to compiled object code, generated documentation,   and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or   Object form, made available under the License, as indicated by a   copyright notice that is included in or attached to the work   (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object   form, that is based on (or derived from) the Work and for which the   editorial revisions, annotations, elaborations, or other modifications   represent, as a whole, an original work of authorship. For the purposes   of this License, Derivative Works shall not include works that remain   separable from, or merely link (or bind by name) to the interfaces of,   the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including   the original version of the Work and any modifications or additions   to that Work or Derivative Works thereof, that is intentionally   submitted to Licensor for inclusion in the Work by the copyright owner   or by an individual or Legal Entity authorized to submit on behalf of   the copyright owner. For the purposes of this definition, \"submitted\"   means any form of electronic, verbal, or written communication sent   to the Licensor or its representatives, including but not limited to   communication on electronic mailing lists, source code control systems,   and issue tracking systems that are managed by, or on behalf of, the   Licensor for the purpose of discussing and improving the Work, but   excluding communication that is conspicuously marked or otherwise   designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity   on behalf of whom a Contribution has been received by Licensor and   subsequently incorporated within the Work.</p> </li> <li> <p>Grant of Copyright License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       copyright license to reproduce, prepare Derivative Works of,       publicly display, publicly perform, sublicense, and distribute the       Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of       this License, each Contributor hereby grants to You a perpetual,       worldwide, non-exclusive, no-charge, royalty-free, irrevocable       (except as stated in this section) patent license to make, have made,       use, offer to sell, sell, import, and otherwise transfer the Work,       where such license applies only to those patent claims licensable       by such Contributor that are necessarily infringed by their       Contribution(s) alone or by combination of their Contribution(s)       with the Work to which such Contribution(s) was submitted. If You       institute patent litigation against any entity (including a       cross-claim or counterclaim in a lawsuit) alleging that the Work       or a Contribution incorporated within the Work constitutes direct       or contributory patent infringement, then any patent licenses       granted to You under this License for that Work shall terminate       as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the       Work or Derivative Works thereof in any medium, with or without       modifications, and in Source or Object form, provided that You       meet the following conditions:</p> <p>(a) You must give any other recipients of the Work or       Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices       stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works       that You distribute, all copyright, patent, trademark, and       attribution notices from the Source form of the Work,       excluding those notices that do not pertain to any part of       the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its       distribution, then any Derivative Works that You distribute must       include a readable copy of the attribution notices contained       within such NOTICE file, excluding those notices that do not       pertain to any part of the Derivative Works, in at least one       of the following places: within a NOTICE text file distributed       as part of the Derivative Works; within the Source form or       documentation, if provided along with the Derivative Works; or,       within a display generated by the Derivative Works, if and       wherever such third-party notices normally appear. The contents       of the NOTICE file are for informational purposes only and       do not modify the License. You may add Your own attribution       notices within Derivative Works that You distribute, alongside       or as an addendum to the NOTICE text from the Work, provided       that such additional attribution notices cannot be construed       as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and   may provide additional or different license terms and conditions   for use, reproduction, or distribution of Your modifications, or   for any such Derivative Works as a whole, provided Your use,   reproduction, and distribution of the Work otherwise complies with   the conditions stated in this License.</p> </li> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,       any Contribution intentionally submitted for inclusion in the Work       by You to the Licensor shall be under the terms and conditions of       this License, without any additional terms or conditions.       Notwithstanding the above, nothing herein shall supersede or modify       the terms of any separate license agreement you may have executed       with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade       names, trademarks, service marks, or product names of the Licensor,       except as required for reasonable and customary use in describing the       origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or       agreed to in writing, Licensor provides the Work (and each       Contributor provides its Contributions) on an \"AS IS\" BASIS,       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       implied, including, without limitation, any warranties or conditions       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A       PARTICULAR PURPOSE. You are solely responsible for determining the       appropriateness of using or redistributing the Work and assume any       risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,       whether in tort (including negligence), contract, or otherwise,       unless required by applicable law (such as deliberate and grossly       negligent acts) or agreed to in writing, shall any Contributor be       liable to You for damages, including any direct, indirect, special,       incidental, or consequential damages of any character arising as a       result of this License or out of the use or inability to use the       Work (including but not limited to damages for loss of goodwill,       work stoppage, computer failure or malfunction, or any and all       other commercial damages or losses), even if such Contributor       has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing       the Work or Derivative Works thereof, You may choose to offer,       and charge a fee for, acceptance of support, warranty, indemnity,       or other liability obligations and/or rights consistent with this       License. However, in accepting such obligations, You may act only       on Your own behalf and on Your sole responsibility, not on behalf       of any other Contributor, and only if You agree to indemnify,       defend, and hold each Contributor harmless for any liability       incurred by, or claims asserted against, such Contributor by reason       of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <pre><code>  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.\n</code></pre> <p>Copyright [yyyy][name of copyright owner]</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at</p> <pre><code>   http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.</p>"},{"location":"autoapi/summary.html","title":"Summary","text":"<ul> <li>client<ul> <li>ayon_equalizer<ul> <li>addon</li> <li>api<ul> <li>host</li> <li>lib</li> <li>pipeline</li> <li>plugin</li> </ul> </li> <li>hooks<ul> <li>pre_add_last_workfile_arg</li> <li>pre_install_qt_bindings</li> </ul> </li> <li>plugins<ul> <li>create<ul> <li>create_lens_distortion_data</li> <li>create_matchmove</li> </ul> </li> <li>load<ul> <li>load_plate</li> </ul> </li> <li>publish<ul> <li>collect_3de_installation_dir</li> <li>collect_3de_version</li> <li>collect_camera_data</li> <li>collect_workfile</li> <li>extract_lens_distortion_nuke</li> <li>extract_matchmove_script_maya</li> <li>extract_matchmove_script_nuke</li> <li>validate_camera_pointgroup</li> <li>validate_instance_camera_data</li> </ul> </li> </ul> </li> <li>startup<ul> <li>ayon_create</li> <li>ayon_load</li> <li>ayon_manage</li> <li>ayon_publish</li> <li>ayon_workfile</li> </ul> </li> <li>test<ul> <li>test_plugins</li> </ul> </li> <li>version</li> </ul> </li> </ul> </li> <li>server<ul> <li>settings<ul> <li>creator_plugins</li> <li>main</li> </ul> </li> </ul> </li> </ul>"},{"location":"autoapi/client/ayon_equalizer/index.html","title":"ayon_equalizer","text":"<p>AYON Equalizer Addon.</p>"},{"location":"autoapi/client/ayon_equalizer/index.html#client.ayon_equalizer.EqualizerAddon","title":"<code>EqualizerAddon</code>","text":"<p>               Bases: <code>AYONAddon</code>, <code>IHostAddon</code></p> <p>3DEqualizer Addon for AYON.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>class EqualizerAddon(AYONAddon, IHostAddon):\n    \"\"\"3DEqualizer Addon for AYON.\"\"\"\n\n    name = \"equalizer\"\n    host_name = \"equalizer\"\n    version = __version__\n    heartbeat = 500\n\n    def initialize(self, settings: dict[str, Any]) -&gt; None:\n        \"\"\"Initialize Equalizer Addon.\"\"\"\n        self.heartbeat = settings.get(\"heartbeat_interval\", 500)\n        self.enabled = True\n\n    def add_implementation_envs(self, env: dict, _app: Any) -&gt; None:  # noqa: ANN401\n        \"\"\"Add 3DEqualizer specific environment variables.\n\n        3DEqualizer utilize TDE4_ROOT for its root directory\n        and PYTHON_CUSTOM_SCRIPTS_3DE4 as a colon separated list of\n        directories to look for additional python scripts.\n        (Windows: list is separated by semicolons).\n\n        Arguments:\n            env (dict): Environment variables.\n            _app (str): Application name.\n\n        \"\"\"\n        startup_path = os.path.join(EQUALIZER_HOST_DIR, \"startup\")\n        if \"PYTHON_CUSTOM_SCRIPTS_3DE4\" in env:\n            startup_path = os.path.join(\n                env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"],\n                startup_path)\n\n        env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"] = startup_path\n        env[\"AYON_TDE4_HEARTBEAT_INTERVAL\"] = str(self.heartbeat)\n\n    def get_launch_hook_paths(self) -&gt; list[str]:\n        \"\"\"Get paths to launch hooks.\"\"\"\n        return [os.path.join(EQUALIZER_HOST_DIR, \"hooks\")]\n\n    def get_workfile_extensions(self) -&gt; list[str]:\n        \"\"\"Get workfile extensions.\"\"\"\n        return [\".3de\"]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/index.html#client.ayon_equalizer.EqualizerAddon.add_implementation_envs","title":"<code>add_implementation_envs(env, _app)</code>","text":"<p>Add 3DEqualizer specific environment variables.</p> <p>3DEqualizer utilize TDE4_ROOT for its root directory and PYTHON_CUSTOM_SCRIPTS_3DE4 as a colon separated list of directories to look for additional python scripts. (Windows: list is separated by semicolons).</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>dict</code> <p>Environment variables.</p> required <code>_app</code> <code>str</code> <p>Application name.</p> required Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def add_implementation_envs(self, env: dict, _app: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Add 3DEqualizer specific environment variables.\n\n    3DEqualizer utilize TDE4_ROOT for its root directory\n    and PYTHON_CUSTOM_SCRIPTS_3DE4 as a colon separated list of\n    directories to look for additional python scripts.\n    (Windows: list is separated by semicolons).\n\n    Arguments:\n        env (dict): Environment variables.\n        _app (str): Application name.\n\n    \"\"\"\n    startup_path = os.path.join(EQUALIZER_HOST_DIR, \"startup\")\n    if \"PYTHON_CUSTOM_SCRIPTS_3DE4\" in env:\n        startup_path = os.path.join(\n            env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"],\n            startup_path)\n\n    env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"] = startup_path\n    env[\"AYON_TDE4_HEARTBEAT_INTERVAL\"] = str(self.heartbeat)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/index.html#client.ayon_equalizer.EqualizerAddon.get_launch_hook_paths","title":"<code>get_launch_hook_paths()</code>","text":"<p>Get paths to launch hooks.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def get_launch_hook_paths(self) -&gt; list[str]:\n    \"\"\"Get paths to launch hooks.\"\"\"\n    return [os.path.join(EQUALIZER_HOST_DIR, \"hooks\")]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/index.html#client.ayon_equalizer.EqualizerAddon.get_workfile_extensions","title":"<code>get_workfile_extensions()</code>","text":"<p>Get workfile extensions.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def get_workfile_extensions(self) -&gt; list[str]:\n    \"\"\"Get workfile extensions.\"\"\"\n    return [\".3de\"]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/index.html#client.ayon_equalizer.EqualizerAddon.initialize","title":"<code>initialize(settings)</code>","text":"<p>Initialize Equalizer Addon.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def initialize(self, settings: dict[str, Any]) -&gt; None:\n    \"\"\"Initialize Equalizer Addon.\"\"\"\n    self.heartbeat = settings.get(\"heartbeat_interval\", 500)\n    self.enabled = True\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/addon.html","title":"addon","text":"<p>3DEqualizer Addon for AYON.</p> <p>Addon definition for 3DEqualizer host in AYON.</p>"},{"location":"autoapi/client/ayon_equalizer/addon.html#client.ayon_equalizer.addon.EqualizerAddon","title":"<code>EqualizerAddon</code>","text":"<p>               Bases: <code>AYONAddon</code>, <code>IHostAddon</code></p> <p>3DEqualizer Addon for AYON.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>class EqualizerAddon(AYONAddon, IHostAddon):\n    \"\"\"3DEqualizer Addon for AYON.\"\"\"\n\n    name = \"equalizer\"\n    host_name = \"equalizer\"\n    version = __version__\n    heartbeat = 500\n\n    def initialize(self, settings: dict[str, Any]) -&gt; None:\n        \"\"\"Initialize Equalizer Addon.\"\"\"\n        self.heartbeat = settings.get(\"heartbeat_interval\", 500)\n        self.enabled = True\n\n    def add_implementation_envs(self, env: dict, _app: Any) -&gt; None:  # noqa: ANN401\n        \"\"\"Add 3DEqualizer specific environment variables.\n\n        3DEqualizer utilize TDE4_ROOT for its root directory\n        and PYTHON_CUSTOM_SCRIPTS_3DE4 as a colon separated list of\n        directories to look for additional python scripts.\n        (Windows: list is separated by semicolons).\n\n        Arguments:\n            env (dict): Environment variables.\n            _app (str): Application name.\n\n        \"\"\"\n        startup_path = os.path.join(EQUALIZER_HOST_DIR, \"startup\")\n        if \"PYTHON_CUSTOM_SCRIPTS_3DE4\" in env:\n            startup_path = os.path.join(\n                env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"],\n                startup_path)\n\n        env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"] = startup_path\n        env[\"AYON_TDE4_HEARTBEAT_INTERVAL\"] = str(self.heartbeat)\n\n    def get_launch_hook_paths(self) -&gt; list[str]:\n        \"\"\"Get paths to launch hooks.\"\"\"\n        return [os.path.join(EQUALIZER_HOST_DIR, \"hooks\")]\n\n    def get_workfile_extensions(self) -&gt; list[str]:\n        \"\"\"Get workfile extensions.\"\"\"\n        return [\".3de\"]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/addon.html#client.ayon_equalizer.addon.EqualizerAddon.add_implementation_envs","title":"<code>add_implementation_envs(env, _app)</code>","text":"<p>Add 3DEqualizer specific environment variables.</p> <p>3DEqualizer utilize TDE4_ROOT for its root directory and PYTHON_CUSTOM_SCRIPTS_3DE4 as a colon separated list of directories to look for additional python scripts. (Windows: list is separated by semicolons).</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>dict</code> <p>Environment variables.</p> required <code>_app</code> <code>str</code> <p>Application name.</p> required Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def add_implementation_envs(self, env: dict, _app: Any) -&gt; None:  # noqa: ANN401\n    \"\"\"Add 3DEqualizer specific environment variables.\n\n    3DEqualizer utilize TDE4_ROOT for its root directory\n    and PYTHON_CUSTOM_SCRIPTS_3DE4 as a colon separated list of\n    directories to look for additional python scripts.\n    (Windows: list is separated by semicolons).\n\n    Arguments:\n        env (dict): Environment variables.\n        _app (str): Application name.\n\n    \"\"\"\n    startup_path = os.path.join(EQUALIZER_HOST_DIR, \"startup\")\n    if \"PYTHON_CUSTOM_SCRIPTS_3DE4\" in env:\n        startup_path = os.path.join(\n            env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"],\n            startup_path)\n\n    env[\"PYTHON_CUSTOM_SCRIPTS_3DE4\"] = startup_path\n    env[\"AYON_TDE4_HEARTBEAT_INTERVAL\"] = str(self.heartbeat)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/addon.html#client.ayon_equalizer.addon.EqualizerAddon.get_launch_hook_paths","title":"<code>get_launch_hook_paths()</code>","text":"<p>Get paths to launch hooks.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def get_launch_hook_paths(self) -&gt; list[str]:\n    \"\"\"Get paths to launch hooks.\"\"\"\n    return [os.path.join(EQUALIZER_HOST_DIR, \"hooks\")]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/addon.html#client.ayon_equalizer.addon.EqualizerAddon.get_workfile_extensions","title":"<code>get_workfile_extensions()</code>","text":"<p>Get workfile extensions.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def get_workfile_extensions(self) -&gt; list[str]:\n    \"\"\"Get workfile extensions.\"\"\"\n    return [\".3de\"]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/addon.html#client.ayon_equalizer.addon.EqualizerAddon.initialize","title":"<code>initialize(settings)</code>","text":"<p>Initialize Equalizer Addon.</p> Source code in <code>client/ayon_equalizer/addon.py</code> <pre><code>def initialize(self, settings: dict[str, Any]) -&gt; None:\n    \"\"\"Initialize Equalizer Addon.\"\"\"\n    self.heartbeat = settings.get(\"heartbeat_interval\", 500)\n    self.enabled = True\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/version.html","title":"version","text":"<p>Package declaring AYON addon 'equalizer' version.</p>"},{"location":"autoapi/client/ayon_equalizer/api/index.html","title":"api","text":"<p>API for the Equalizer plugin.</p>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.Container","title":"<code>Container</code>  <code>dataclass</code>","text":"<p>Container data class.</p> Source code in <code>client/ayon_equalizer/api/pipeline.py</code> <pre><code>@dataclass\nclass Container:\n    \"\"\"Container data class.\"\"\"\n\n    name: str = None\n    id: str = AYON_CONTAINER_ID\n    namespace: str = \"\"\n    loader: str = None\n    representation: str = None\n    objectName: str = None  # noqa: N815\n    timestamp: int = 0\n    version: str = None\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerCreator","title":"<code>EqualizerCreator</code>","text":"<p>               Bases: <code>Creator</code></p> <p>Base class for creating instances in 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>class EqualizerCreator(Creator):\n    \"\"\"Base class for creating instances in 3DEqualizer.\"\"\"\n\n    def create(self,\n               product_name: str,\n               instance_data: dict,\n               pre_create_data: dict) -&gt; CreatedInstance:\n        \"\"\"Create a subset in the host application.\n\n        Args:\n            product_name (str): Name of the subset to create.\n            instance_data (dict): Data of the instance to create.\n            pre_create_data (dict): Data from the pre-create step.\n\n        Returns:\n            ayon_core.pipeline.CreatedInstance: Created instance.\n\n        \"\"\"\n        self.log.debug(\"EqualizerCreator.create\")\n        instance = CreatedInstance(\n            self.product_type,\n            product_name,\n            instance_data,\n            self)\n        self._add_instance_to_context(instance)\n\n        host: EqualizerHost = self.host\n        host.add_publish_instance(instance.data_to_store())\n\n        return instance\n\n    def collect_instances(self) -&gt; None:\n        \"\"\"Collect instances from the host application.\n\n        Returns:\n            list[openpype.pipeline.CreatedInstance]: List of instances.\n\n        \"\"\"\n        host: EqualizerHost = self.host\n        for instance_data in host.get_publish_instances():\n            if instance_data[\"creator_identifier\"] != self.identifier:\n                continue\n            created_instance = CreatedInstance.from_existing(\n                instance_data, self\n            )\n            self._add_instance_to_context(created_instance)\n\n    def update_instances(self, update_list: list[dict]) -&gt; None:\n        \"\"\"Update instances in the host application.\"\"\"\n        host: EqualizerHost = self.host\n\n        current_instances = host.get_publish_instances()\n        cur_instances_by_id = {}\n        for instance_data in current_instances:\n            # sourcery skip: use-named-expression\n            instance_id = instance_data.get(\"instance_id\")\n            if instance_id:\n                cur_instances_by_id[instance_id] = instance_data\n\n        for instance, changes in update_list:\n            instance_data = changes.new_value\n            cur_instance_data = cur_instances_by_id.get(instance.id)\n            if cur_instance_data is None:\n                current_instances.append(instance_data)\n                continue\n            for key in set(cur_instance_data) - set(instance_data):\n                cur_instance_data.pop(key)\n            cur_instance_data.update(instance_data)\n        host.write_create_instances(current_instances)\n\n    def remove_instances(self, instances: list[CreatedInstance]) -&gt; None:\n        \"\"\"Remove instances from the host application.\"\"\"\n        host: EqualizerHost = self.host\n        for instance in instances:\n            self._remove_instance_from_context(instance)\n            host.remove_create_instance(instance.id)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerCreator.collect_instances","title":"<code>collect_instances()</code>","text":"<p>Collect instances from the host application.</p> <p>Returns:</p> Type Description <code>None</code> <p>list[openpype.pipeline.CreatedInstance]: List of instances.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def collect_instances(self) -&gt; None:\n    \"\"\"Collect instances from the host application.\n\n    Returns:\n        list[openpype.pipeline.CreatedInstance]: List of instances.\n\n    \"\"\"\n    host: EqualizerHost = self.host\n    for instance_data in host.get_publish_instances():\n        if instance_data[\"creator_identifier\"] != self.identifier:\n            continue\n        created_instance = CreatedInstance.from_existing(\n            instance_data, self\n        )\n        self._add_instance_to_context(created_instance)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerCreator.create","title":"<code>create(product_name, instance_data, pre_create_data)</code>","text":"<p>Create a subset in the host application.</p> <p>Parameters:</p> Name Type Description Default <code>product_name</code> <code>str</code> <p>Name of the subset to create.</p> required <code>instance_data</code> <code>dict</code> <p>Data of the instance to create.</p> required <code>pre_create_data</code> <code>dict</code> <p>Data from the pre-create step.</p> required <p>Returns:</p> Type Description <code>CreatedInstance</code> <p>ayon_core.pipeline.CreatedInstance: Created instance.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def create(self,\n           product_name: str,\n           instance_data: dict,\n           pre_create_data: dict) -&gt; CreatedInstance:\n    \"\"\"Create a subset in the host application.\n\n    Args:\n        product_name (str): Name of the subset to create.\n        instance_data (dict): Data of the instance to create.\n        pre_create_data (dict): Data from the pre-create step.\n\n    Returns:\n        ayon_core.pipeline.CreatedInstance: Created instance.\n\n    \"\"\"\n    self.log.debug(\"EqualizerCreator.create\")\n    instance = CreatedInstance(\n        self.product_type,\n        product_name,\n        instance_data,\n        self)\n    self._add_instance_to_context(instance)\n\n    host: EqualizerHost = self.host\n    host.add_publish_instance(instance.data_to_store())\n\n    return instance\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerCreator.remove_instances","title":"<code>remove_instances(instances)</code>","text":"<p>Remove instances from the host application.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def remove_instances(self, instances: list[CreatedInstance]) -&gt; None:\n    \"\"\"Remove instances from the host application.\"\"\"\n    host: EqualizerHost = self.host\n    for instance in instances:\n        self._remove_instance_from_context(instance)\n        host.remove_create_instance(instance.id)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerCreator.update_instances","title":"<code>update_instances(update_list)</code>","text":"<p>Update instances in the host application.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def update_instances(self, update_list: list[dict]) -&gt; None:\n    \"\"\"Update instances in the host application.\"\"\"\n    host: EqualizerHost = self.host\n\n    current_instances = host.get_publish_instances()\n    cur_instances_by_id = {}\n    for instance_data in current_instances:\n        # sourcery skip: use-named-expression\n        instance_id = instance_data.get(\"instance_id\")\n        if instance_id:\n            cur_instances_by_id[instance_id] = instance_data\n\n    for instance, changes in update_list:\n        instance_data = changes.new_value\n        cur_instance_data = cur_instances_by_id.get(instance.id)\n        if cur_instance_data is None:\n            current_instances.append(instance_data)\n            continue\n        for key in set(cur_instance_data) - set(instance_data):\n            cur_instance_data.pop(key)\n        cur_instance_data.update(instance_data)\n    host.write_create_instances(current_instances)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost","title":"<code>EqualizerHost</code>","text":"<p>               Bases: <code>HostBase</code>, <code>IWorkfileHost</code>, <code>ILoadHost</code>, <code>IPublishHost</code></p> <p>3DEqualizer host implementation.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>class EqualizerHost(HostBase, IWorkfileHost, ILoadHost, IPublishHost):\n    \"\"\"3DEqualizer host implementation.\"\"\"\n\n    name = \"equalizer\"\n    _instance = None\n\n    def __new__(cls):\n        \"\"\"Singleton implementation.\"\"\"\n        # singleton - ensure only one instance of the host is created.\n        # This is necessary because 3DEqualizer doesn't have a way to\n        # store custom data, so we need to store it in the project notes.\n        if not hasattr(cls, \"_instance\") or not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n    def __init__(self):\n        \"\"\"Initialize the host.\"\"\"\n        self._qapp = None\n        super().__init__()\n\n    def workfile_has_unsaved_changes(self) -&gt; bool:\n        \"\"\"Return the state of the current workfile.\n\n        3DEqualizer returns state as 1 or zero, so we need to invert it.\n\n        Returns:\n            bool: True if the current workfile has unsaved changes.\n\n        \"\"\"\n        return not bool(tde4.isProjectUpToDate())\n\n    def get_workfile_extensions(self) -&gt; list[str]:\n        \"\"\"Return the workfile extensions for 3DEqualizer.\"\"\"\n        return [\".3de\"]\n\n    def save_workfile(self, dst_path: Optional[str]=None) -&gt; str:\n        \"\"\"Save the current workfile.\n\n        Arguments:\n            dst_path (str): Destination path to save the workfile.\n\n        \"\"\"\n        if not dst_path:\n            dst_path = tde4.getProjectPath()\n        result = tde4.saveProject(dst_path, True)  # noqa: FBT003\n        if not bool(result):\n            err_msg = f\"Failed to save workfile {dst_path}.\"\n            raise RuntimeError(err_msg)\n\n        return dst_path\n\n    def open_workfile(self, filepath: str) -&gt; str:\n        \"\"\"Open a workfile in 3DEqualizer.\"\"\"\n        result = tde4.loadProject(filepath, True)  # noqa: FBT003\n        if not bool(result):\n            err_msg = f\"Failed to open workfile {filepath}.\"\n            raise RuntimeError(err_msg)\n\n        return filepath\n\n    def get_current_workfile(self) -&gt; str:\n        \"\"\"Return the current workfile path.\"\"\"\n        return tde4.getProjectPath()\n\n    def get_containers(self) -&gt; list[Container]:\n        \"\"\"Get containers from the current workfile.\"\"\"\n        # sourcery skip: use-named-expression\n        data = self.get_ayon_data()\n        if data:\n            yield from data.get(EQUALIZER_CONTAINERS_KEY, [])\n        return []\n\n    def add_container(self, container: Container) -&gt; None:\n        \"\"\"Add a container to the current workfile.\n\n        Args:\n            container (Container): Container to add.\n\n        \"\"\"\n        data = self.get_ayon_data()\n        containers = self.get_containers()\n        to_remove = [\n            idx\n            for idx, _container in enumerate(containers)\n            if _container.name == container.name\n            and _container.namespace == container.namespace\n        ]\n        for idx in reversed(to_remove):\n            containers.pop(idx)\n\n        data[EQUALIZER_CONTAINERS_KEY] = [\n            *containers, dataclasses.asdict(container)]\n\n        self.update_ayon_data(data)\n\n    def _create_ayon_data(self) -&gt; None:\n        \"\"\"Create AYON data in the current project.\"\"\"\n        tde4.setProjectNotes(\n            f\"{tde4.getProjectNotes()}\\n\"\n            f\"{AYON_METADATA_GUARD}\\n\")\n        # this is really necessary otherwise the data is not saved\n        tde4.updateGUI()\n\n    def get_ayon_data(self) -&gt; dict:\n        \"\"\"Get AYON context data from the current project.\n\n        3Dequalizer doesn't have any custom node or other\n        place to store metadata, so we store context data in\n        the project notes encoded as JSON and wrapped in a\n        special guard string `AYON_CONTEXT::...::AYON_CONTEXT_END`.\n\n        Returns:\n            dict: Context data.\n\n        \"\"\"\n        # sourcery skip: use-named-expression\n        m = re.search(AYON_METADATA_REGEX, tde4.getProjectNotes())\n        if not m:\n            self._create_ayon_data()\n            return {}\n        try:\n            context = json.loads(m[\"context\"]) if m else {}\n        except ValueError:\n            self.log.debug(\"AYON data is not valid json\")\n            # AYON data not found or invalid, create empty placeholder\n            self._create_ayon_data()\n            return {}\n\n        return context\n\n    def update_ayon_data(self, data: dict) -&gt; None:\n        \"\"\"Update AYON context data in the current project.\n\n        Serialize context data as json and store it in the\n        project notes. If the context data is not found, create\n        a placeholder there. See `get_context_data` for more info.\n\n        Args:\n            data (dict): Context data.\n\n        \"\"\"\n        original_data = self.get_ayon_data()\n\n        updated_data = original_data.copy()\n        updated_data.update(data)\n        update_str = json.dumps(\n            updated_data or {}, indent=4, cls=AYONJSONEncoder)\n\n        tde4.setProjectNotes(\n            re.sub(\n                AYON_METADATA_REGEX,\n                AYON_METADATA_GUARD.format(update_str),\n                tde4.getProjectNotes(),\n            )\n        )\n        tde4.updateGUI()\n\n    def get_context_data(self) -&gt; dict:\n        \"\"\"Get context data from the current project.\"\"\"\n        data = self.get_ayon_data()\n\n        return data.get(EQUALIZER_CONTEXT_KEY, {})\n\n    def update_context_data(self, data: dict, changes: dict) -&gt; None:\n        \"\"\"Update context data in the current project.\n\n        Args:\n            data (dict): Context data.\n            changes (dict): Changes to the context data.\n\n        Raises:\n            RuntimeError: If the context data is not found.\n\n        \"\"\"\n        if not data:\n            return\n        ayon_data = self.get_ayon_data()\n        ayon_data[EQUALIZER_CONTEXT_KEY] = data\n        self.update_ayon_data(ayon_data)\n\n\n    def get_publish_instances(self) -&gt; list[dict]:\n        \"\"\"Get publish instances from the current project.\"\"\"\n        data = self.get_ayon_data()\n        return data.get(EQUALIZER_INSTANCES_KEY, [])\n\n    def add_publish_instance(self, instance_data: dict) -&gt; None:\n        \"\"\"Add a publish instance to the current project.\n\n        Args:\n            instance_data (dict): Publish instance to add.\n\n        \"\"\"\n        data = self.get_ayon_data()\n        publish_instances = self.get_publish_instances()\n        publish_instances.append(instance_data)\n        data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n        self.update_ayon_data(data)\n\n    def update_publish_instance(\n            self,\n            instance_id: str,\n            data: dict,\n    ) -&gt; None:\n        \"\"\"Update a publish instance in the current project.\n\n        Args:\n            instance_id (str): Publish instance id to update.\n            data (dict): Data to update.\n\n        \"\"\"\n        ayon_data = self.get_ayon_data()\n        publish_instances = self.get_publish_instances()\n        for idx, publish_instance in enumerate(publish_instances):\n            if publish_instance[\"instance_id\"] == instance_id:\n                publish_instances[idx] = data\n                break\n        ayon_data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n        self.update_ayon_data(ayon_data)\n\n    def write_create_instances(\n            self, instances: list[dict]) -&gt; None:\n        \"\"\"Write publish instances to the current project.\"\"\"\n        ayon_data = self.get_ayon_data()\n        ayon_data[EQUALIZER_INSTANCES_KEY] = instances\n        self.update_ayon_data(ayon_data)\n\n    def remove_create_instance(self, instance_id: str) -&gt; None:\n        \"\"\"Remove a publish instance from the current project.\n\n        Args:\n            instance_id (str): Publish instance id to remove.\n\n        \"\"\"\n        data = self.get_ayon_data()\n        publish_instances = self.get_publish_instances()\n        publish_instances = [\n            publish_instance\n            for publish_instance in publish_instances\n            if publish_instance[\"instance_id\"] != instance_id\n        ]\n        data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n        self.update_ayon_data(data)\n\n\n    def install(self) -&gt; None:\n        \"\"\"Install the host.\"\"\"\n        if not QtCore.QCoreApplication.instance():\n            app = QtWidgets.QApplication([])\n            self._qapp = app\n            self._qapp.setQuitOnLastWindowClosed(False)\n\n        pyblish.api.register_host(\"equalizer\")\n\n        pyblish.api.register_plugin_path(PUBLISH_PATH)\n        register_loader_plugin_path(LOAD_PATH)\n        register_creator_plugin_path(CREATE_PATH)\n\n        heartbeat_interval = os.getenv(\"AYON_TDE4_HEARTBEAT_INTERVAL\") or 500\n        tde4.setTimerCallbackFunction(\n            \"EqualizerHost._timer\", int(heartbeat_interval))\n\n    @staticmethod\n    def _timer() -&gt; None:\n        \"\"\"Timer callback function.\"\"\"\n        QtWidgets.QApplication.instance().processEvents(\n            QtCore.QEventLoop.AllEvents)\n\n    @classmethod\n    def get_host(cls) -&gt; EqualizerHost:\n        \"\"\"Get the host instance.\"\"\"\n        return cls._instance\n\n    def get_main_window(self) -&gt; QtWidgets.QWidget:\n        \"\"\"Get the main window of the host application.\"\"\"\n        return self._qapp.activeWindow()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the host.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the host.\"\"\"\n    self._qapp = None\n    super().__init__()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.__new__","title":"<code>__new__()</code>","text":"<p>Singleton implementation.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def __new__(cls):\n    \"\"\"Singleton implementation.\"\"\"\n    # singleton - ensure only one instance of the host is created.\n    # This is necessary because 3DEqualizer doesn't have a way to\n    # store custom data, so we need to store it in the project notes.\n    if not hasattr(cls, \"_instance\") or not cls._instance:\n        cls._instance = super().__new__(cls)\n    return cls._instance\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.add_container","title":"<code>add_container(container)</code>","text":"<p>Add a container to the current workfile.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>Container</code> <p>Container to add.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def add_container(self, container: Container) -&gt; None:\n    \"\"\"Add a container to the current workfile.\n\n    Args:\n        container (Container): Container to add.\n\n    \"\"\"\n    data = self.get_ayon_data()\n    containers = self.get_containers()\n    to_remove = [\n        idx\n        for idx, _container in enumerate(containers)\n        if _container.name == container.name\n        and _container.namespace == container.namespace\n    ]\n    for idx in reversed(to_remove):\n        containers.pop(idx)\n\n    data[EQUALIZER_CONTAINERS_KEY] = [\n        *containers, dataclasses.asdict(container)]\n\n    self.update_ayon_data(data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.add_publish_instance","title":"<code>add_publish_instance(instance_data)</code>","text":"<p>Add a publish instance to the current project.</p> <p>Parameters:</p> Name Type Description Default <code>instance_data</code> <code>dict</code> <p>Publish instance to add.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def add_publish_instance(self, instance_data: dict) -&gt; None:\n    \"\"\"Add a publish instance to the current project.\n\n    Args:\n        instance_data (dict): Publish instance to add.\n\n    \"\"\"\n    data = self.get_ayon_data()\n    publish_instances = self.get_publish_instances()\n    publish_instances.append(instance_data)\n    data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n    self.update_ayon_data(data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_ayon_data","title":"<code>get_ayon_data()</code>","text":"<p>Get AYON context data from the current project.</p> <p>3Dequalizer doesn't have any custom node or other place to store metadata, so we store context data in the project notes encoded as JSON and wrapped in a special guard string <code>AYON_CONTEXT::...::AYON_CONTEXT_END</code>.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Context data.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_ayon_data(self) -&gt; dict:\n    \"\"\"Get AYON context data from the current project.\n\n    3Dequalizer doesn't have any custom node or other\n    place to store metadata, so we store context data in\n    the project notes encoded as JSON and wrapped in a\n    special guard string `AYON_CONTEXT::...::AYON_CONTEXT_END`.\n\n    Returns:\n        dict: Context data.\n\n    \"\"\"\n    # sourcery skip: use-named-expression\n    m = re.search(AYON_METADATA_REGEX, tde4.getProjectNotes())\n    if not m:\n        self._create_ayon_data()\n        return {}\n    try:\n        context = json.loads(m[\"context\"]) if m else {}\n    except ValueError:\n        self.log.debug(\"AYON data is not valid json\")\n        # AYON data not found or invalid, create empty placeholder\n        self._create_ayon_data()\n        return {}\n\n    return context\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_containers","title":"<code>get_containers()</code>","text":"<p>Get containers from the current workfile.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_containers(self) -&gt; list[Container]:\n    \"\"\"Get containers from the current workfile.\"\"\"\n    # sourcery skip: use-named-expression\n    data = self.get_ayon_data()\n    if data:\n        yield from data.get(EQUALIZER_CONTAINERS_KEY, [])\n    return []\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_context_data","title":"<code>get_context_data()</code>","text":"<p>Get context data from the current project.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_context_data(self) -&gt; dict:\n    \"\"\"Get context data from the current project.\"\"\"\n    data = self.get_ayon_data()\n\n    return data.get(EQUALIZER_CONTEXT_KEY, {})\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_current_workfile","title":"<code>get_current_workfile()</code>","text":"<p>Return the current workfile path.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_current_workfile(self) -&gt; str:\n    \"\"\"Return the current workfile path.\"\"\"\n    return tde4.getProjectPath()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_host","title":"<code>get_host()</code>  <code>classmethod</code>","text":"<p>Get the host instance.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>@classmethod\ndef get_host(cls) -&gt; EqualizerHost:\n    \"\"\"Get the host instance.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_main_window","title":"<code>get_main_window()</code>","text":"<p>Get the main window of the host application.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_main_window(self) -&gt; QtWidgets.QWidget:\n    \"\"\"Get the main window of the host application.\"\"\"\n    return self._qapp.activeWindow()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_publish_instances","title":"<code>get_publish_instances()</code>","text":"<p>Get publish instances from the current project.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_publish_instances(self) -&gt; list[dict]:\n    \"\"\"Get publish instances from the current project.\"\"\"\n    data = self.get_ayon_data()\n    return data.get(EQUALIZER_INSTANCES_KEY, [])\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.get_workfile_extensions","title":"<code>get_workfile_extensions()</code>","text":"<p>Return the workfile extensions for 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_workfile_extensions(self) -&gt; list[str]:\n    \"\"\"Return the workfile extensions for 3DEqualizer.\"\"\"\n    return [\".3de\"]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.install","title":"<code>install()</code>","text":"<p>Install the host.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def install(self) -&gt; None:\n    \"\"\"Install the host.\"\"\"\n    if not QtCore.QCoreApplication.instance():\n        app = QtWidgets.QApplication([])\n        self._qapp = app\n        self._qapp.setQuitOnLastWindowClosed(False)\n\n    pyblish.api.register_host(\"equalizer\")\n\n    pyblish.api.register_plugin_path(PUBLISH_PATH)\n    register_loader_plugin_path(LOAD_PATH)\n    register_creator_plugin_path(CREATE_PATH)\n\n    heartbeat_interval = os.getenv(\"AYON_TDE4_HEARTBEAT_INTERVAL\") or 500\n    tde4.setTimerCallbackFunction(\n        \"EqualizerHost._timer\", int(heartbeat_interval))\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.open_workfile","title":"<code>open_workfile(filepath)</code>","text":"<p>Open a workfile in 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def open_workfile(self, filepath: str) -&gt; str:\n    \"\"\"Open a workfile in 3DEqualizer.\"\"\"\n    result = tde4.loadProject(filepath, True)  # noqa: FBT003\n    if not bool(result):\n        err_msg = f\"Failed to open workfile {filepath}.\"\n        raise RuntimeError(err_msg)\n\n    return filepath\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.remove_create_instance","title":"<code>remove_create_instance(instance_id)</code>","text":"<p>Remove a publish instance from the current project.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>Publish instance id to remove.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def remove_create_instance(self, instance_id: str) -&gt; None:\n    \"\"\"Remove a publish instance from the current project.\n\n    Args:\n        instance_id (str): Publish instance id to remove.\n\n    \"\"\"\n    data = self.get_ayon_data()\n    publish_instances = self.get_publish_instances()\n    publish_instances = [\n        publish_instance\n        for publish_instance in publish_instances\n        if publish_instance[\"instance_id\"] != instance_id\n    ]\n    data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n    self.update_ayon_data(data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.save_workfile","title":"<code>save_workfile(dst_path=None)</code>","text":"<p>Save the current workfile.</p> <p>Parameters:</p> Name Type Description Default <code>dst_path</code> <code>str</code> <p>Destination path to save the workfile.</p> <code>None</code> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def save_workfile(self, dst_path: Optional[str]=None) -&gt; str:\n    \"\"\"Save the current workfile.\n\n    Arguments:\n        dst_path (str): Destination path to save the workfile.\n\n    \"\"\"\n    if not dst_path:\n        dst_path = tde4.getProjectPath()\n    result = tde4.saveProject(dst_path, True)  # noqa: FBT003\n    if not bool(result):\n        err_msg = f\"Failed to save workfile {dst_path}.\"\n        raise RuntimeError(err_msg)\n\n    return dst_path\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.update_ayon_data","title":"<code>update_ayon_data(data)</code>","text":"<p>Update AYON context data in the current project.</p> <p>Serialize context data as json and store it in the project notes. If the context data is not found, create a placeholder there. See <code>get_context_data</code> for more info.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Context data.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def update_ayon_data(self, data: dict) -&gt; None:\n    \"\"\"Update AYON context data in the current project.\n\n    Serialize context data as json and store it in the\n    project notes. If the context data is not found, create\n    a placeholder there. See `get_context_data` for more info.\n\n    Args:\n        data (dict): Context data.\n\n    \"\"\"\n    original_data = self.get_ayon_data()\n\n    updated_data = original_data.copy()\n    updated_data.update(data)\n    update_str = json.dumps(\n        updated_data or {}, indent=4, cls=AYONJSONEncoder)\n\n    tde4.setProjectNotes(\n        re.sub(\n            AYON_METADATA_REGEX,\n            AYON_METADATA_GUARD.format(update_str),\n            tde4.getProjectNotes(),\n        )\n    )\n    tde4.updateGUI()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.update_context_data","title":"<code>update_context_data(data, changes)</code>","text":"<p>Update context data in the current project.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Context data.</p> required <code>changes</code> <code>dict</code> <p>Changes to the context data.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the context data is not found.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def update_context_data(self, data: dict, changes: dict) -&gt; None:\n    \"\"\"Update context data in the current project.\n\n    Args:\n        data (dict): Context data.\n        changes (dict): Changes to the context data.\n\n    Raises:\n        RuntimeError: If the context data is not found.\n\n    \"\"\"\n    if not data:\n        return\n    ayon_data = self.get_ayon_data()\n    ayon_data[EQUALIZER_CONTEXT_KEY] = data\n    self.update_ayon_data(ayon_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.update_publish_instance","title":"<code>update_publish_instance(instance_id, data)</code>","text":"<p>Update a publish instance in the current project.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>Publish instance id to update.</p> required <code>data</code> <code>dict</code> <p>Data to update.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def update_publish_instance(\n        self,\n        instance_id: str,\n        data: dict,\n) -&gt; None:\n    \"\"\"Update a publish instance in the current project.\n\n    Args:\n        instance_id (str): Publish instance id to update.\n        data (dict): Data to update.\n\n    \"\"\"\n    ayon_data = self.get_ayon_data()\n    publish_instances = self.get_publish_instances()\n    for idx, publish_instance in enumerate(publish_instances):\n        if publish_instance[\"instance_id\"] == instance_id:\n            publish_instances[idx] = data\n            break\n    ayon_data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n    self.update_ayon_data(ayon_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.workfile_has_unsaved_changes","title":"<code>workfile_has_unsaved_changes()</code>","text":"<p>Return the state of the current workfile.</p> <p>3DEqualizer returns state as 1 or zero, so we need to invert it.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the current workfile has unsaved changes.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def workfile_has_unsaved_changes(self) -&gt; bool:\n    \"\"\"Return the state of the current workfile.\n\n    3DEqualizer returns state as 1 or zero, so we need to invert it.\n\n    Returns:\n        bool: True if the current workfile has unsaved changes.\n\n    \"\"\"\n    return not bool(tde4.isProjectUpToDate())\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.EqualizerHost.write_create_instances","title":"<code>write_create_instances(instances)</code>","text":"<p>Write publish instances to the current project.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def write_create_instances(\n        self, instances: list[dict]) -&gt; None:\n    \"\"\"Write publish instances to the current project.\"\"\"\n    ayon_data = self.get_ayon_data()\n    ayon_data[EQUALIZER_INSTANCES_KEY] = instances\n    self.update_ayon_data(ayon_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.ExtractScriptBase","title":"<code>ExtractScriptBase</code>","text":"<p>               Bases: <code>OptionalPyblishPluginMixin</code></p> <p>Base class for extract script plugins.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>class ExtractScriptBase(OptionalPyblishPluginMixin):\n    \"\"\"Base class for extract script plugins.\"\"\"\n\n    hide_reference_frame = False\n    export_uv_textures = False\n    overscan_percent_width = 100\n    overscan_percent_height = 100\n    units = \"mm\"\n\n    @classmethod\n    def apply_settings(\n            cls, project_settings: dict,\n            system_settings: dict) -&gt; None:  # noqa: ARG003\n        \"\"\"Apply settings from the configuration.\"\"\"\n        settings = project_settings[\"equalizer\"][\"publish\"][\n            \"ExtractMatchmoveScriptMaya\"]\n\n        cls.hide_reference_frame = settings.get(\n            \"hide_reference_frame\", cls.hide_reference_frame)\n        cls.export_uv_textures = settings.get(\n            \"export_uv_textures\", cls.export_uv_textures)\n        cls.overscan_percent_width = settings.get(\n            \"overscan_percent_width\", cls.overscan_percent_width)\n        cls.overscan_percent_height = settings.get(\n            \"overscan_percent_height\", cls.overscan_percent_height)\n        cls.units = settings.get(\"units\", cls.units)\n\n    @classmethod\n    def get_attribute_defs(cls) -&gt; list:\n        \"\"\"Get attribute definitions for the plugin.\"\"\"\n        defs = super().get_attribute_defs()\n\n        defs.extend([\n            BoolDef(\"hide_reference_frame\",\n                    label=\"Hide Reference Frame\",\n                    default=cls.hide_reference_frame),\n            BoolDef(\"export_uv_textures\",\n                    label=\"Export UV Textures\",\n                    default=cls.export_uv_textures),\n            NumberDef(\"overscan_percent_width\",\n                      label=\"Overscan Width %\",\n                      default=cls.overscan_percent_width,\n                      decimals=0,\n                      minimum=1,\n                      maximum=1000),\n            NumberDef(\"overscan_percent_height\",\n                      label=\"Overscan Height %\",\n                      default=cls.overscan_percent_height,\n                      decimals=0,\n                      minimum=1,\n                      maximum=1000),\n            EnumDef(\"units\",\n                    [\"mm\", \"cm\", \"m\", \"in\", \"ft\", \"yd\"],\n                    default=cls.units,\n                    label=\"Units\"),\n            BoolDef(\"point_sets\",\n                    label=\"Export Point Sets\",\n                    default=True),\n            BoolDef(\"export_2p5d\",\n                    label=\"Export 2.5D Points\",\n                    default=True),\n        ])\n        return defs\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.ExtractScriptBase.apply_settings","title":"<code>apply_settings(project_settings, system_settings)</code>  <code>classmethod</code>","text":"<p>Apply settings from the configuration.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>@classmethod\ndef apply_settings(\n        cls, project_settings: dict,\n        system_settings: dict) -&gt; None:  # noqa: ARG003\n    \"\"\"Apply settings from the configuration.\"\"\"\n    settings = project_settings[\"equalizer\"][\"publish\"][\n        \"ExtractMatchmoveScriptMaya\"]\n\n    cls.hide_reference_frame = settings.get(\n        \"hide_reference_frame\", cls.hide_reference_frame)\n    cls.export_uv_textures = settings.get(\n        \"export_uv_textures\", cls.export_uv_textures)\n    cls.overscan_percent_width = settings.get(\n        \"overscan_percent_width\", cls.overscan_percent_width)\n    cls.overscan_percent_height = settings.get(\n        \"overscan_percent_height\", cls.overscan_percent_height)\n    cls.units = settings.get(\"units\", cls.units)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.ExtractScriptBase.get_attribute_defs","title":"<code>get_attribute_defs()</code>  <code>classmethod</code>","text":"<p>Get attribute definitions for the plugin.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>@classmethod\ndef get_attribute_defs(cls) -&gt; list:\n    \"\"\"Get attribute definitions for the plugin.\"\"\"\n    defs = super().get_attribute_defs()\n\n    defs.extend([\n        BoolDef(\"hide_reference_frame\",\n                label=\"Hide Reference Frame\",\n                default=cls.hide_reference_frame),\n        BoolDef(\"export_uv_textures\",\n                label=\"Export UV Textures\",\n                default=cls.export_uv_textures),\n        NumberDef(\"overscan_percent_width\",\n                  label=\"Overscan Width %\",\n                  default=cls.overscan_percent_width,\n                  decimals=0,\n                  minimum=1,\n                  maximum=1000),\n        NumberDef(\"overscan_percent_height\",\n                  label=\"Overscan Height %\",\n                  default=cls.overscan_percent_height,\n                  decimals=0,\n                  minimum=1,\n                  maximum=1000),\n        EnumDef(\"units\",\n                [\"mm\", \"cm\", \"m\", \"in\", \"ft\", \"yd\"],\n                default=cls.units,\n                label=\"Units\"),\n        BoolDef(\"point_sets\",\n                label=\"Export Point Sets\",\n                default=True),\n        BoolDef(\"export_2p5d\",\n                label=\"Export 2.5D Points\",\n                default=True),\n    ])\n    return defs\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/index.html#client.ayon_equalizer.api.maintained_model_selection","title":"<code>maintained_model_selection()</code>","text":"<p>Maintain model selection during context.</p> Source code in <code>client/ayon_equalizer/api/pipeline.py</code> <pre><code>@contextlib.contextmanager\ndef maintained_model_selection() -&gt; None:\n    \"\"\"Maintain model selection during context.\"\"\"\n    point_groups = tde4.getPGroupList()\n    point_group = next(\n        (\n            pg for pg in point_groups\n            if tde4.getPGroupType(pg) == \"CAMERA\"\n        ), None,\n    )\n    selected_models = tde4.get3DModelList(point_group, 1) \\\n        if point_group else []\n    try:\n        yield\n    finally:\n        if point_group:\n            # 3 restore model selection\n            for model in tde4.get3DModelList(point_group, 0):\n                if model in selected_models:\n                    tde4.set3DModelSelectionFlag(point_group, model, 1)\n                else:\n                    tde4.set3DModelSelectionFlag(point_group, model, 0)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html","title":"host","text":"<p>3dequalizer host implementation.</p> Note <p>3dequalizer 7.1v2 uses Python 3.7.9 3dequalizer 8.0 uses Python 3.9.x</p>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.AYONJSONEncoder","title":"<code>AYONJSONEncoder</code>","text":"<p>               Bases: <code>JSONEncoder</code></p> <p>Custom JSON encoder for dataclasses.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>class AYONJSONEncoder(json.JSONEncoder):\n    \"\"\"Custom JSON encoder for dataclasses.\"\"\"\n\n    def default(self, obj: object) -&gt; Union[dict, object]:\n        \"\"\"Encode dataclasses as dict.\"\"\"\n        if dataclasses.is_dataclass(obj):\n            # type: obj: dataclasses.dataclass\n            return dataclasses.asdict(obj)\n        if isinstance(obj, CreatedInstance):\n            return dict(obj)\n        return super().default(obj)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.AYONJSONEncoder.default","title":"<code>default(obj)</code>","text":"<p>Encode dataclasses as dict.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def default(self, obj: object) -&gt; Union[dict, object]:\n    \"\"\"Encode dataclasses as dict.\"\"\"\n    if dataclasses.is_dataclass(obj):\n        # type: obj: dataclasses.dataclass\n        return dataclasses.asdict(obj)\n    if isinstance(obj, CreatedInstance):\n        return dict(obj)\n    return super().default(obj)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost","title":"<code>EqualizerHost</code>","text":"<p>               Bases: <code>HostBase</code>, <code>IWorkfileHost</code>, <code>ILoadHost</code>, <code>IPublishHost</code></p> <p>3DEqualizer host implementation.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>class EqualizerHost(HostBase, IWorkfileHost, ILoadHost, IPublishHost):\n    \"\"\"3DEqualizer host implementation.\"\"\"\n\n    name = \"equalizer\"\n    _instance = None\n\n    def __new__(cls):\n        \"\"\"Singleton implementation.\"\"\"\n        # singleton - ensure only one instance of the host is created.\n        # This is necessary because 3DEqualizer doesn't have a way to\n        # store custom data, so we need to store it in the project notes.\n        if not hasattr(cls, \"_instance\") or not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n\n    def __init__(self):\n        \"\"\"Initialize the host.\"\"\"\n        self._qapp = None\n        super().__init__()\n\n    def workfile_has_unsaved_changes(self) -&gt; bool:\n        \"\"\"Return the state of the current workfile.\n\n        3DEqualizer returns state as 1 or zero, so we need to invert it.\n\n        Returns:\n            bool: True if the current workfile has unsaved changes.\n\n        \"\"\"\n        return not bool(tde4.isProjectUpToDate())\n\n    def get_workfile_extensions(self) -&gt; list[str]:\n        \"\"\"Return the workfile extensions for 3DEqualizer.\"\"\"\n        return [\".3de\"]\n\n    def save_workfile(self, dst_path: Optional[str]=None) -&gt; str:\n        \"\"\"Save the current workfile.\n\n        Arguments:\n            dst_path (str): Destination path to save the workfile.\n\n        \"\"\"\n        if not dst_path:\n            dst_path = tde4.getProjectPath()\n        result = tde4.saveProject(dst_path, True)  # noqa: FBT003\n        if not bool(result):\n            err_msg = f\"Failed to save workfile {dst_path}.\"\n            raise RuntimeError(err_msg)\n\n        return dst_path\n\n    def open_workfile(self, filepath: str) -&gt; str:\n        \"\"\"Open a workfile in 3DEqualizer.\"\"\"\n        result = tde4.loadProject(filepath, True)  # noqa: FBT003\n        if not bool(result):\n            err_msg = f\"Failed to open workfile {filepath}.\"\n            raise RuntimeError(err_msg)\n\n        return filepath\n\n    def get_current_workfile(self) -&gt; str:\n        \"\"\"Return the current workfile path.\"\"\"\n        return tde4.getProjectPath()\n\n    def get_containers(self) -&gt; list[Container]:\n        \"\"\"Get containers from the current workfile.\"\"\"\n        # sourcery skip: use-named-expression\n        data = self.get_ayon_data()\n        if data:\n            yield from data.get(EQUALIZER_CONTAINERS_KEY, [])\n        return []\n\n    def add_container(self, container: Container) -&gt; None:\n        \"\"\"Add a container to the current workfile.\n\n        Args:\n            container (Container): Container to add.\n\n        \"\"\"\n        data = self.get_ayon_data()\n        containers = self.get_containers()\n        to_remove = [\n            idx\n            for idx, _container in enumerate(containers)\n            if _container.name == container.name\n            and _container.namespace == container.namespace\n        ]\n        for idx in reversed(to_remove):\n            containers.pop(idx)\n\n        data[EQUALIZER_CONTAINERS_KEY] = [\n            *containers, dataclasses.asdict(container)]\n\n        self.update_ayon_data(data)\n\n    def _create_ayon_data(self) -&gt; None:\n        \"\"\"Create AYON data in the current project.\"\"\"\n        tde4.setProjectNotes(\n            f\"{tde4.getProjectNotes()}\\n\"\n            f\"{AYON_METADATA_GUARD}\\n\")\n        # this is really necessary otherwise the data is not saved\n        tde4.updateGUI()\n\n    def get_ayon_data(self) -&gt; dict:\n        \"\"\"Get AYON context data from the current project.\n\n        3Dequalizer doesn't have any custom node or other\n        place to store metadata, so we store context data in\n        the project notes encoded as JSON and wrapped in a\n        special guard string `AYON_CONTEXT::...::AYON_CONTEXT_END`.\n\n        Returns:\n            dict: Context data.\n\n        \"\"\"\n        # sourcery skip: use-named-expression\n        m = re.search(AYON_METADATA_REGEX, tde4.getProjectNotes())\n        if not m:\n            self._create_ayon_data()\n            return {}\n        try:\n            context = json.loads(m[\"context\"]) if m else {}\n        except ValueError:\n            self.log.debug(\"AYON data is not valid json\")\n            # AYON data not found or invalid, create empty placeholder\n            self._create_ayon_data()\n            return {}\n\n        return context\n\n    def update_ayon_data(self, data: dict) -&gt; None:\n        \"\"\"Update AYON context data in the current project.\n\n        Serialize context data as json and store it in the\n        project notes. If the context data is not found, create\n        a placeholder there. See `get_context_data` for more info.\n\n        Args:\n            data (dict): Context data.\n\n        \"\"\"\n        original_data = self.get_ayon_data()\n\n        updated_data = original_data.copy()\n        updated_data.update(data)\n        update_str = json.dumps(\n            updated_data or {}, indent=4, cls=AYONJSONEncoder)\n\n        tde4.setProjectNotes(\n            re.sub(\n                AYON_METADATA_REGEX,\n                AYON_METADATA_GUARD.format(update_str),\n                tde4.getProjectNotes(),\n            )\n        )\n        tde4.updateGUI()\n\n    def get_context_data(self) -&gt; dict:\n        \"\"\"Get context data from the current project.\"\"\"\n        data = self.get_ayon_data()\n\n        return data.get(EQUALIZER_CONTEXT_KEY, {})\n\n    def update_context_data(self, data: dict, changes: dict) -&gt; None:\n        \"\"\"Update context data in the current project.\n\n        Args:\n            data (dict): Context data.\n            changes (dict): Changes to the context data.\n\n        Raises:\n            RuntimeError: If the context data is not found.\n\n        \"\"\"\n        if not data:\n            return\n        ayon_data = self.get_ayon_data()\n        ayon_data[EQUALIZER_CONTEXT_KEY] = data\n        self.update_ayon_data(ayon_data)\n\n\n    def get_publish_instances(self) -&gt; list[dict]:\n        \"\"\"Get publish instances from the current project.\"\"\"\n        data = self.get_ayon_data()\n        return data.get(EQUALIZER_INSTANCES_KEY, [])\n\n    def add_publish_instance(self, instance_data: dict) -&gt; None:\n        \"\"\"Add a publish instance to the current project.\n\n        Args:\n            instance_data (dict): Publish instance to add.\n\n        \"\"\"\n        data = self.get_ayon_data()\n        publish_instances = self.get_publish_instances()\n        publish_instances.append(instance_data)\n        data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n        self.update_ayon_data(data)\n\n    def update_publish_instance(\n            self,\n            instance_id: str,\n            data: dict,\n    ) -&gt; None:\n        \"\"\"Update a publish instance in the current project.\n\n        Args:\n            instance_id (str): Publish instance id to update.\n            data (dict): Data to update.\n\n        \"\"\"\n        ayon_data = self.get_ayon_data()\n        publish_instances = self.get_publish_instances()\n        for idx, publish_instance in enumerate(publish_instances):\n            if publish_instance[\"instance_id\"] == instance_id:\n                publish_instances[idx] = data\n                break\n        ayon_data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n        self.update_ayon_data(ayon_data)\n\n    def write_create_instances(\n            self, instances: list[dict]) -&gt; None:\n        \"\"\"Write publish instances to the current project.\"\"\"\n        ayon_data = self.get_ayon_data()\n        ayon_data[EQUALIZER_INSTANCES_KEY] = instances\n        self.update_ayon_data(ayon_data)\n\n    def remove_create_instance(self, instance_id: str) -&gt; None:\n        \"\"\"Remove a publish instance from the current project.\n\n        Args:\n            instance_id (str): Publish instance id to remove.\n\n        \"\"\"\n        data = self.get_ayon_data()\n        publish_instances = self.get_publish_instances()\n        publish_instances = [\n            publish_instance\n            for publish_instance in publish_instances\n            if publish_instance[\"instance_id\"] != instance_id\n        ]\n        data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n        self.update_ayon_data(data)\n\n\n    def install(self) -&gt; None:\n        \"\"\"Install the host.\"\"\"\n        if not QtCore.QCoreApplication.instance():\n            app = QtWidgets.QApplication([])\n            self._qapp = app\n            self._qapp.setQuitOnLastWindowClosed(False)\n\n        pyblish.api.register_host(\"equalizer\")\n\n        pyblish.api.register_plugin_path(PUBLISH_PATH)\n        register_loader_plugin_path(LOAD_PATH)\n        register_creator_plugin_path(CREATE_PATH)\n\n        heartbeat_interval = os.getenv(\"AYON_TDE4_HEARTBEAT_INTERVAL\") or 500\n        tde4.setTimerCallbackFunction(\n            \"EqualizerHost._timer\", int(heartbeat_interval))\n\n    @staticmethod\n    def _timer() -&gt; None:\n        \"\"\"Timer callback function.\"\"\"\n        QtWidgets.QApplication.instance().processEvents(\n            QtCore.QEventLoop.AllEvents)\n\n    @classmethod\n    def get_host(cls) -&gt; EqualizerHost:\n        \"\"\"Get the host instance.\"\"\"\n        return cls._instance\n\n    def get_main_window(self) -&gt; QtWidgets.QWidget:\n        \"\"\"Get the main window of the host application.\"\"\"\n        return self._qapp.activeWindow()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the host.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the host.\"\"\"\n    self._qapp = None\n    super().__init__()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.__new__","title":"<code>__new__()</code>","text":"<p>Singleton implementation.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def __new__(cls):\n    \"\"\"Singleton implementation.\"\"\"\n    # singleton - ensure only one instance of the host is created.\n    # This is necessary because 3DEqualizer doesn't have a way to\n    # store custom data, so we need to store it in the project notes.\n    if not hasattr(cls, \"_instance\") or not cls._instance:\n        cls._instance = super().__new__(cls)\n    return cls._instance\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.add_container","title":"<code>add_container(container)</code>","text":"<p>Add a container to the current workfile.</p> <p>Parameters:</p> Name Type Description Default <code>container</code> <code>Container</code> <p>Container to add.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def add_container(self, container: Container) -&gt; None:\n    \"\"\"Add a container to the current workfile.\n\n    Args:\n        container (Container): Container to add.\n\n    \"\"\"\n    data = self.get_ayon_data()\n    containers = self.get_containers()\n    to_remove = [\n        idx\n        for idx, _container in enumerate(containers)\n        if _container.name == container.name\n        and _container.namespace == container.namespace\n    ]\n    for idx in reversed(to_remove):\n        containers.pop(idx)\n\n    data[EQUALIZER_CONTAINERS_KEY] = [\n        *containers, dataclasses.asdict(container)]\n\n    self.update_ayon_data(data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.add_publish_instance","title":"<code>add_publish_instance(instance_data)</code>","text":"<p>Add a publish instance to the current project.</p> <p>Parameters:</p> Name Type Description Default <code>instance_data</code> <code>dict</code> <p>Publish instance to add.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def add_publish_instance(self, instance_data: dict) -&gt; None:\n    \"\"\"Add a publish instance to the current project.\n\n    Args:\n        instance_data (dict): Publish instance to add.\n\n    \"\"\"\n    data = self.get_ayon_data()\n    publish_instances = self.get_publish_instances()\n    publish_instances.append(instance_data)\n    data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n    self.update_ayon_data(data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_ayon_data","title":"<code>get_ayon_data()</code>","text":"<p>Get AYON context data from the current project.</p> <p>3Dequalizer doesn't have any custom node or other place to store metadata, so we store context data in the project notes encoded as JSON and wrapped in a special guard string <code>AYON_CONTEXT::...::AYON_CONTEXT_END</code>.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Context data.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_ayon_data(self) -&gt; dict:\n    \"\"\"Get AYON context data from the current project.\n\n    3Dequalizer doesn't have any custom node or other\n    place to store metadata, so we store context data in\n    the project notes encoded as JSON and wrapped in a\n    special guard string `AYON_CONTEXT::...::AYON_CONTEXT_END`.\n\n    Returns:\n        dict: Context data.\n\n    \"\"\"\n    # sourcery skip: use-named-expression\n    m = re.search(AYON_METADATA_REGEX, tde4.getProjectNotes())\n    if not m:\n        self._create_ayon_data()\n        return {}\n    try:\n        context = json.loads(m[\"context\"]) if m else {}\n    except ValueError:\n        self.log.debug(\"AYON data is not valid json\")\n        # AYON data not found or invalid, create empty placeholder\n        self._create_ayon_data()\n        return {}\n\n    return context\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_containers","title":"<code>get_containers()</code>","text":"<p>Get containers from the current workfile.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_containers(self) -&gt; list[Container]:\n    \"\"\"Get containers from the current workfile.\"\"\"\n    # sourcery skip: use-named-expression\n    data = self.get_ayon_data()\n    if data:\n        yield from data.get(EQUALIZER_CONTAINERS_KEY, [])\n    return []\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_context_data","title":"<code>get_context_data()</code>","text":"<p>Get context data from the current project.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_context_data(self) -&gt; dict:\n    \"\"\"Get context data from the current project.\"\"\"\n    data = self.get_ayon_data()\n\n    return data.get(EQUALIZER_CONTEXT_KEY, {})\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_current_workfile","title":"<code>get_current_workfile()</code>","text":"<p>Return the current workfile path.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_current_workfile(self) -&gt; str:\n    \"\"\"Return the current workfile path.\"\"\"\n    return tde4.getProjectPath()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_host","title":"<code>get_host()</code>  <code>classmethod</code>","text":"<p>Get the host instance.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>@classmethod\ndef get_host(cls) -&gt; EqualizerHost:\n    \"\"\"Get the host instance.\"\"\"\n    return cls._instance\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_main_window","title":"<code>get_main_window()</code>","text":"<p>Get the main window of the host application.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_main_window(self) -&gt; QtWidgets.QWidget:\n    \"\"\"Get the main window of the host application.\"\"\"\n    return self._qapp.activeWindow()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_publish_instances","title":"<code>get_publish_instances()</code>","text":"<p>Get publish instances from the current project.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_publish_instances(self) -&gt; list[dict]:\n    \"\"\"Get publish instances from the current project.\"\"\"\n    data = self.get_ayon_data()\n    return data.get(EQUALIZER_INSTANCES_KEY, [])\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.get_workfile_extensions","title":"<code>get_workfile_extensions()</code>","text":"<p>Return the workfile extensions for 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def get_workfile_extensions(self) -&gt; list[str]:\n    \"\"\"Return the workfile extensions for 3DEqualizer.\"\"\"\n    return [\".3de\"]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.install","title":"<code>install()</code>","text":"<p>Install the host.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def install(self) -&gt; None:\n    \"\"\"Install the host.\"\"\"\n    if not QtCore.QCoreApplication.instance():\n        app = QtWidgets.QApplication([])\n        self._qapp = app\n        self._qapp.setQuitOnLastWindowClosed(False)\n\n    pyblish.api.register_host(\"equalizer\")\n\n    pyblish.api.register_plugin_path(PUBLISH_PATH)\n    register_loader_plugin_path(LOAD_PATH)\n    register_creator_plugin_path(CREATE_PATH)\n\n    heartbeat_interval = os.getenv(\"AYON_TDE4_HEARTBEAT_INTERVAL\") or 500\n    tde4.setTimerCallbackFunction(\n        \"EqualizerHost._timer\", int(heartbeat_interval))\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.open_workfile","title":"<code>open_workfile(filepath)</code>","text":"<p>Open a workfile in 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def open_workfile(self, filepath: str) -&gt; str:\n    \"\"\"Open a workfile in 3DEqualizer.\"\"\"\n    result = tde4.loadProject(filepath, True)  # noqa: FBT003\n    if not bool(result):\n        err_msg = f\"Failed to open workfile {filepath}.\"\n        raise RuntimeError(err_msg)\n\n    return filepath\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.remove_create_instance","title":"<code>remove_create_instance(instance_id)</code>","text":"<p>Remove a publish instance from the current project.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>Publish instance id to remove.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def remove_create_instance(self, instance_id: str) -&gt; None:\n    \"\"\"Remove a publish instance from the current project.\n\n    Args:\n        instance_id (str): Publish instance id to remove.\n\n    \"\"\"\n    data = self.get_ayon_data()\n    publish_instances = self.get_publish_instances()\n    publish_instances = [\n        publish_instance\n        for publish_instance in publish_instances\n        if publish_instance[\"instance_id\"] != instance_id\n    ]\n    data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n    self.update_ayon_data(data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.save_workfile","title":"<code>save_workfile(dst_path=None)</code>","text":"<p>Save the current workfile.</p> <p>Parameters:</p> Name Type Description Default <code>dst_path</code> <code>str</code> <p>Destination path to save the workfile.</p> <code>None</code> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def save_workfile(self, dst_path: Optional[str]=None) -&gt; str:\n    \"\"\"Save the current workfile.\n\n    Arguments:\n        dst_path (str): Destination path to save the workfile.\n\n    \"\"\"\n    if not dst_path:\n        dst_path = tde4.getProjectPath()\n    result = tde4.saveProject(dst_path, True)  # noqa: FBT003\n    if not bool(result):\n        err_msg = f\"Failed to save workfile {dst_path}.\"\n        raise RuntimeError(err_msg)\n\n    return dst_path\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.update_ayon_data","title":"<code>update_ayon_data(data)</code>","text":"<p>Update AYON context data in the current project.</p> <p>Serialize context data as json and store it in the project notes. If the context data is not found, create a placeholder there. See <code>get_context_data</code> for more info.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Context data.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def update_ayon_data(self, data: dict) -&gt; None:\n    \"\"\"Update AYON context data in the current project.\n\n    Serialize context data as json and store it in the\n    project notes. If the context data is not found, create\n    a placeholder there. See `get_context_data` for more info.\n\n    Args:\n        data (dict): Context data.\n\n    \"\"\"\n    original_data = self.get_ayon_data()\n\n    updated_data = original_data.copy()\n    updated_data.update(data)\n    update_str = json.dumps(\n        updated_data or {}, indent=4, cls=AYONJSONEncoder)\n\n    tde4.setProjectNotes(\n        re.sub(\n            AYON_METADATA_REGEX,\n            AYON_METADATA_GUARD.format(update_str),\n            tde4.getProjectNotes(),\n        )\n    )\n    tde4.updateGUI()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.update_context_data","title":"<code>update_context_data(data, changes)</code>","text":"<p>Update context data in the current project.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Context data.</p> required <code>changes</code> <code>dict</code> <p>Changes to the context data.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the context data is not found.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def update_context_data(self, data: dict, changes: dict) -&gt; None:\n    \"\"\"Update context data in the current project.\n\n    Args:\n        data (dict): Context data.\n        changes (dict): Changes to the context data.\n\n    Raises:\n        RuntimeError: If the context data is not found.\n\n    \"\"\"\n    if not data:\n        return\n    ayon_data = self.get_ayon_data()\n    ayon_data[EQUALIZER_CONTEXT_KEY] = data\n    self.update_ayon_data(ayon_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.update_publish_instance","title":"<code>update_publish_instance(instance_id, data)</code>","text":"<p>Update a publish instance in the current project.</p> <p>Parameters:</p> Name Type Description Default <code>instance_id</code> <code>str</code> <p>Publish instance id to update.</p> required <code>data</code> <code>dict</code> <p>Data to update.</p> required Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def update_publish_instance(\n        self,\n        instance_id: str,\n        data: dict,\n) -&gt; None:\n    \"\"\"Update a publish instance in the current project.\n\n    Args:\n        instance_id (str): Publish instance id to update.\n        data (dict): Data to update.\n\n    \"\"\"\n    ayon_data = self.get_ayon_data()\n    publish_instances = self.get_publish_instances()\n    for idx, publish_instance in enumerate(publish_instances):\n        if publish_instance[\"instance_id\"] == instance_id:\n            publish_instances[idx] = data\n            break\n    ayon_data[EQUALIZER_INSTANCES_KEY] = publish_instances\n\n    self.update_ayon_data(ayon_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.workfile_has_unsaved_changes","title":"<code>workfile_has_unsaved_changes()</code>","text":"<p>Return the state of the current workfile.</p> <p>3DEqualizer returns state as 1 or zero, so we need to invert it.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the current workfile has unsaved changes.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def workfile_has_unsaved_changes(self) -&gt; bool:\n    \"\"\"Return the state of the current workfile.\n\n    3DEqualizer returns state as 1 or zero, so we need to invert it.\n\n    Returns:\n        bool: True if the current workfile has unsaved changes.\n\n    \"\"\"\n    return not bool(tde4.isProjectUpToDate())\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/host.html#client.ayon_equalizer.api.host.EqualizerHost.write_create_instances","title":"<code>write_create_instances(instances)</code>","text":"<p>Write publish instances to the current project.</p> Source code in <code>client/ayon_equalizer/api/host.py</code> <pre><code>def write_create_instances(\n        self, instances: list[dict]) -&gt; None:\n    \"\"\"Write publish instances to the current project.\"\"\"\n    ayon_data = self.get_ayon_data()\n    ayon_data[EQUALIZER_INSTANCES_KEY] = instances\n    self.update_ayon_data(ayon_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/lib.html","title":"lib","text":"<p>Library functions for the AYON Equalizer API.</p>"},{"location":"autoapi/client/ayon_equalizer/api/lib.html#client.ayon_equalizer.api.lib.maya_valid_name","title":"<code>maya_valid_name(name)</code>","text":"<p>Make a given name Maya valid and return it.</p> <p>This function is taken from 3dequalizer's <code>export_maya.py</code> script with just slight refactoring, logic is the same to be compliant with the 3dequalizer's logic.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name to make Maya valid.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Maya valid name.</p> Source code in <code>client/ayon_equalizer/api/lib.py</code> <pre><code>def maya_valid_name(name: str) -&gt; str:\n    \"\"\"Make a given name Maya valid and return it.\n\n    This function is taken from 3dequalizer's `export_maya.py` script\n    with just slight refactoring, logic is the same to be compliant with\n    the 3dequalizer's logic.\n\n    Arguments:\n        name (str): Name to make Maya valid.\n\n    Returns:\n        str: Maya valid name.\n\n    \"\"\"\n    # make a given name maya valid and return it.\n    if not name:\n        return \"\"\n    if name[0].lower() not in \"abcdefghijklmnopqrstuvwxyz_\":\n        name = f\"_{name}\"\n\n    # fix some special ASCII metadata\n    name = name.replace(\"\\n\", \"\")\n    name = name.replace(\"\\r\", \"\")\n\n    # fix the middle of the file as an array\n    name_as_array = list(name)\n    for i, letter in enumerate(name_as_array):\n        if letter.lower() not in \"abcdefghijklmnopqrstuvwxyz0123456789_\":\n            name_as_array[i] = \"_\"\n\n    # back to string form\n    name = \"\".join(name_as_array)\n\n    # remove sequential underscores until they are all gone\n    while \"__\" in name:\n        name = name.replace(\"__\", \"_\")\n\n    return name.removesuffix(\"_\")\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/pipeline.html","title":"pipeline","text":"<p>Pipeline API module.</p>"},{"location":"autoapi/client/ayon_equalizer/api/pipeline.html#client.ayon_equalizer.api.pipeline.Container","title":"<code>Container</code>  <code>dataclass</code>","text":"<p>Container data class.</p> Source code in <code>client/ayon_equalizer/api/pipeline.py</code> <pre><code>@dataclass\nclass Container:\n    \"\"\"Container data class.\"\"\"\n\n    name: str = None\n    id: str = AYON_CONTAINER_ID\n    namespace: str = \"\"\n    loader: str = None\n    representation: str = None\n    objectName: str = None  # noqa: N815\n    timestamp: int = 0\n    version: str = None\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/pipeline.html#client.ayon_equalizer.api.pipeline.maintained_model_selection","title":"<code>maintained_model_selection()</code>","text":"<p>Maintain model selection during context.</p> Source code in <code>client/ayon_equalizer/api/pipeline.py</code> <pre><code>@contextlib.contextmanager\ndef maintained_model_selection() -&gt; None:\n    \"\"\"Maintain model selection during context.\"\"\"\n    point_groups = tde4.getPGroupList()\n    point_group = next(\n        (\n            pg for pg in point_groups\n            if tde4.getPGroupType(pg) == \"CAMERA\"\n        ), None,\n    )\n    selected_models = tde4.get3DModelList(point_group, 1) \\\n        if point_group else []\n    try:\n        yield\n    finally:\n        if point_group:\n            # 3 restore model selection\n            for model in tde4.get3DModelList(point_group, 0):\n                if model in selected_models:\n                    tde4.set3DModelSelectionFlag(point_group, model, 1)\n                else:\n                    tde4.set3DModelSelectionFlag(point_group, model, 0)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html","title":"plugin","text":"<p>Base plugin class for 3DEqualizer.</p> Note <p>3dequalizer 7.1v2 uses Python 3.7.9 3dequalizer 8.0 uses Python 3.9</p>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.EqualizerCreator","title":"<code>EqualizerCreator</code>","text":"<p>               Bases: <code>Creator</code></p> <p>Base class for creating instances in 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>class EqualizerCreator(Creator):\n    \"\"\"Base class for creating instances in 3DEqualizer.\"\"\"\n\n    def create(self,\n               product_name: str,\n               instance_data: dict,\n               pre_create_data: dict) -&gt; CreatedInstance:\n        \"\"\"Create a subset in the host application.\n\n        Args:\n            product_name (str): Name of the subset to create.\n            instance_data (dict): Data of the instance to create.\n            pre_create_data (dict): Data from the pre-create step.\n\n        Returns:\n            ayon_core.pipeline.CreatedInstance: Created instance.\n\n        \"\"\"\n        self.log.debug(\"EqualizerCreator.create\")\n        instance = CreatedInstance(\n            self.product_type,\n            product_name,\n            instance_data,\n            self)\n        self._add_instance_to_context(instance)\n\n        host: EqualizerHost = self.host\n        host.add_publish_instance(instance.data_to_store())\n\n        return instance\n\n    def collect_instances(self) -&gt; None:\n        \"\"\"Collect instances from the host application.\n\n        Returns:\n            list[openpype.pipeline.CreatedInstance]: List of instances.\n\n        \"\"\"\n        host: EqualizerHost = self.host\n        for instance_data in host.get_publish_instances():\n            if instance_data[\"creator_identifier\"] != self.identifier:\n                continue\n            created_instance = CreatedInstance.from_existing(\n                instance_data, self\n            )\n            self._add_instance_to_context(created_instance)\n\n    def update_instances(self, update_list: list[dict]) -&gt; None:\n        \"\"\"Update instances in the host application.\"\"\"\n        host: EqualizerHost = self.host\n\n        current_instances = host.get_publish_instances()\n        cur_instances_by_id = {}\n        for instance_data in current_instances:\n            # sourcery skip: use-named-expression\n            instance_id = instance_data.get(\"instance_id\")\n            if instance_id:\n                cur_instances_by_id[instance_id] = instance_data\n\n        for instance, changes in update_list:\n            instance_data = changes.new_value\n            cur_instance_data = cur_instances_by_id.get(instance.id)\n            if cur_instance_data is None:\n                current_instances.append(instance_data)\n                continue\n            for key in set(cur_instance_data) - set(instance_data):\n                cur_instance_data.pop(key)\n            cur_instance_data.update(instance_data)\n        host.write_create_instances(current_instances)\n\n    def remove_instances(self, instances: list[CreatedInstance]) -&gt; None:\n        \"\"\"Remove instances from the host application.\"\"\"\n        host: EqualizerHost = self.host\n        for instance in instances:\n            self._remove_instance_from_context(instance)\n            host.remove_create_instance(instance.id)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.EqualizerCreator.collect_instances","title":"<code>collect_instances()</code>","text":"<p>Collect instances from the host application.</p> <p>Returns:</p> Type Description <code>None</code> <p>list[openpype.pipeline.CreatedInstance]: List of instances.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def collect_instances(self) -&gt; None:\n    \"\"\"Collect instances from the host application.\n\n    Returns:\n        list[openpype.pipeline.CreatedInstance]: List of instances.\n\n    \"\"\"\n    host: EqualizerHost = self.host\n    for instance_data in host.get_publish_instances():\n        if instance_data[\"creator_identifier\"] != self.identifier:\n            continue\n        created_instance = CreatedInstance.from_existing(\n            instance_data, self\n        )\n        self._add_instance_to_context(created_instance)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.EqualizerCreator.create","title":"<code>create(product_name, instance_data, pre_create_data)</code>","text":"<p>Create a subset in the host application.</p> <p>Parameters:</p> Name Type Description Default <code>product_name</code> <code>str</code> <p>Name of the subset to create.</p> required <code>instance_data</code> <code>dict</code> <p>Data of the instance to create.</p> required <code>pre_create_data</code> <code>dict</code> <p>Data from the pre-create step.</p> required <p>Returns:</p> Type Description <code>CreatedInstance</code> <p>ayon_core.pipeline.CreatedInstance: Created instance.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def create(self,\n           product_name: str,\n           instance_data: dict,\n           pre_create_data: dict) -&gt; CreatedInstance:\n    \"\"\"Create a subset in the host application.\n\n    Args:\n        product_name (str): Name of the subset to create.\n        instance_data (dict): Data of the instance to create.\n        pre_create_data (dict): Data from the pre-create step.\n\n    Returns:\n        ayon_core.pipeline.CreatedInstance: Created instance.\n\n    \"\"\"\n    self.log.debug(\"EqualizerCreator.create\")\n    instance = CreatedInstance(\n        self.product_type,\n        product_name,\n        instance_data,\n        self)\n    self._add_instance_to_context(instance)\n\n    host: EqualizerHost = self.host\n    host.add_publish_instance(instance.data_to_store())\n\n    return instance\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.EqualizerCreator.remove_instances","title":"<code>remove_instances(instances)</code>","text":"<p>Remove instances from the host application.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def remove_instances(self, instances: list[CreatedInstance]) -&gt; None:\n    \"\"\"Remove instances from the host application.\"\"\"\n    host: EqualizerHost = self.host\n    for instance in instances:\n        self._remove_instance_from_context(instance)\n        host.remove_create_instance(instance.id)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.EqualizerCreator.update_instances","title":"<code>update_instances(update_list)</code>","text":"<p>Update instances in the host application.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>def update_instances(self, update_list: list[dict]) -&gt; None:\n    \"\"\"Update instances in the host application.\"\"\"\n    host: EqualizerHost = self.host\n\n    current_instances = host.get_publish_instances()\n    cur_instances_by_id = {}\n    for instance_data in current_instances:\n        # sourcery skip: use-named-expression\n        instance_id = instance_data.get(\"instance_id\")\n        if instance_id:\n            cur_instances_by_id[instance_id] = instance_data\n\n    for instance, changes in update_list:\n        instance_data = changes.new_value\n        cur_instance_data = cur_instances_by_id.get(instance.id)\n        if cur_instance_data is None:\n            current_instances.append(instance_data)\n            continue\n        for key in set(cur_instance_data) - set(instance_data):\n            cur_instance_data.pop(key)\n        cur_instance_data.update(instance_data)\n    host.write_create_instances(current_instances)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.ExtractScriptBase","title":"<code>ExtractScriptBase</code>","text":"<p>               Bases: <code>OptionalPyblishPluginMixin</code></p> <p>Base class for extract script plugins.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>class ExtractScriptBase(OptionalPyblishPluginMixin):\n    \"\"\"Base class for extract script plugins.\"\"\"\n\n    hide_reference_frame = False\n    export_uv_textures = False\n    overscan_percent_width = 100\n    overscan_percent_height = 100\n    units = \"mm\"\n\n    @classmethod\n    def apply_settings(\n            cls, project_settings: dict,\n            system_settings: dict) -&gt; None:  # noqa: ARG003\n        \"\"\"Apply settings from the configuration.\"\"\"\n        settings = project_settings[\"equalizer\"][\"publish\"][\n            \"ExtractMatchmoveScriptMaya\"]\n\n        cls.hide_reference_frame = settings.get(\n            \"hide_reference_frame\", cls.hide_reference_frame)\n        cls.export_uv_textures = settings.get(\n            \"export_uv_textures\", cls.export_uv_textures)\n        cls.overscan_percent_width = settings.get(\n            \"overscan_percent_width\", cls.overscan_percent_width)\n        cls.overscan_percent_height = settings.get(\n            \"overscan_percent_height\", cls.overscan_percent_height)\n        cls.units = settings.get(\"units\", cls.units)\n\n    @classmethod\n    def get_attribute_defs(cls) -&gt; list:\n        \"\"\"Get attribute definitions for the plugin.\"\"\"\n        defs = super().get_attribute_defs()\n\n        defs.extend([\n            BoolDef(\"hide_reference_frame\",\n                    label=\"Hide Reference Frame\",\n                    default=cls.hide_reference_frame),\n            BoolDef(\"export_uv_textures\",\n                    label=\"Export UV Textures\",\n                    default=cls.export_uv_textures),\n            NumberDef(\"overscan_percent_width\",\n                      label=\"Overscan Width %\",\n                      default=cls.overscan_percent_width,\n                      decimals=0,\n                      minimum=1,\n                      maximum=1000),\n            NumberDef(\"overscan_percent_height\",\n                      label=\"Overscan Height %\",\n                      default=cls.overscan_percent_height,\n                      decimals=0,\n                      minimum=1,\n                      maximum=1000),\n            EnumDef(\"units\",\n                    [\"mm\", \"cm\", \"m\", \"in\", \"ft\", \"yd\"],\n                    default=cls.units,\n                    label=\"Units\"),\n            BoolDef(\"point_sets\",\n                    label=\"Export Point Sets\",\n                    default=True),\n            BoolDef(\"export_2p5d\",\n                    label=\"Export 2.5D Points\",\n                    default=True),\n        ])\n        return defs\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.ExtractScriptBase.apply_settings","title":"<code>apply_settings(project_settings, system_settings)</code>  <code>classmethod</code>","text":"<p>Apply settings from the configuration.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>@classmethod\ndef apply_settings(\n        cls, project_settings: dict,\n        system_settings: dict) -&gt; None:  # noqa: ARG003\n    \"\"\"Apply settings from the configuration.\"\"\"\n    settings = project_settings[\"equalizer\"][\"publish\"][\n        \"ExtractMatchmoveScriptMaya\"]\n\n    cls.hide_reference_frame = settings.get(\n        \"hide_reference_frame\", cls.hide_reference_frame)\n    cls.export_uv_textures = settings.get(\n        \"export_uv_textures\", cls.export_uv_textures)\n    cls.overscan_percent_width = settings.get(\n        \"overscan_percent_width\", cls.overscan_percent_width)\n    cls.overscan_percent_height = settings.get(\n        \"overscan_percent_height\", cls.overscan_percent_height)\n    cls.units = settings.get(\"units\", cls.units)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/api/plugin.html#client.ayon_equalizer.api.plugin.ExtractScriptBase.get_attribute_defs","title":"<code>get_attribute_defs()</code>  <code>classmethod</code>","text":"<p>Get attribute definitions for the plugin.</p> Source code in <code>client/ayon_equalizer/api/plugin.py</code> <pre><code>@classmethod\ndef get_attribute_defs(cls) -&gt; list:\n    \"\"\"Get attribute definitions for the plugin.\"\"\"\n    defs = super().get_attribute_defs()\n\n    defs.extend([\n        BoolDef(\"hide_reference_frame\",\n                label=\"Hide Reference Frame\",\n                default=cls.hide_reference_frame),\n        BoolDef(\"export_uv_textures\",\n                label=\"Export UV Textures\",\n                default=cls.export_uv_textures),\n        NumberDef(\"overscan_percent_width\",\n                  label=\"Overscan Width %\",\n                  default=cls.overscan_percent_width,\n                  decimals=0,\n                  minimum=1,\n                  maximum=1000),\n        NumberDef(\"overscan_percent_height\",\n                  label=\"Overscan Height %\",\n                  default=cls.overscan_percent_height,\n                  decimals=0,\n                  minimum=1,\n                  maximum=1000),\n        EnumDef(\"units\",\n                [\"mm\", \"cm\", \"m\", \"in\", \"ft\", \"yd\"],\n                default=cls.units,\n                label=\"Units\"),\n        BoolDef(\"point_sets\",\n                label=\"Export Point Sets\",\n                default=True),\n        BoolDef(\"export_2p5d\",\n                label=\"Export 2.5D Points\",\n                default=True),\n    ])\n    return defs\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/hooks/index.html","title":"hooks","text":"<p>Hooks for AYON Equalizer.</p>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_add_last_workfile_arg.html","title":"pre_add_last_workfile_arg","text":"<p>Add last workfile path to launch arguments.</p>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_add_last_workfile_arg.html#client.ayon_equalizer.hooks.pre_add_last_workfile_arg.AddLast3DEWorkfileToLaunchArgs","title":"<code>AddLast3DEWorkfileToLaunchArgs</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Add last workfile path to launch arguments.</p> <p>Copied from ayon_core/hooks/pre_add_last_workfile_arg.py. Checks 'start_last_workfile', if set to False, it will not open last workfile. This property is set explicitly in Launcher.</p> Source code in <code>client/ayon_equalizer/hooks/pre_add_last_workfile_arg.py</code> <pre><code>class AddLast3DEWorkfileToLaunchArgs(PreLaunchHook):\n    \"\"\"Add last workfile path to launch arguments.\n\n    Copied from ayon_core/hooks/pre_add_last_workfile_arg.py.\n    Checks 'start_last_workfile', if set to False, it will not open last\n    workfile. This property is set explicitly in Launcher.\n    \"\"\"\n\n    # Execute after workfile template copy\n    order = 10\n    app_groups: ClassVar[set[str]] = {\"equalizer\"}\n    launch_types: ClassVar[set[str]] = {LaunchTypes.local}\n\n    def execute(self) -&gt; None:\n        \"\"\"Execute the hook.\"\"\"\n        if not self.data.get(\"start_last_workfile\"):\n            self.log.info(\"It is set to not start last workfile on start.\")\n            return\n\n        last_workfile = self.data.get(\"last_workfile_path\")\n        if not last_workfile:\n            self.log.warning(\"Last workfile was not collected.\")\n            return\n\n        if not os.path.exists(last_workfile):\n            self.log.info(\"Current context does not have any workfile yet.\")\n            return\n\n        # Add path to workfile to arguments\n        self.launch_context.launch_args.extend([\"-open\", last_workfile])\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_add_last_workfile_arg.html#client.ayon_equalizer.hooks.pre_add_last_workfile_arg.AddLast3DEWorkfileToLaunchArgs.execute","title":"<code>execute()</code>","text":"<p>Execute the hook.</p> Source code in <code>client/ayon_equalizer/hooks/pre_add_last_workfile_arg.py</code> <pre><code>def execute(self) -&gt; None:\n    \"\"\"Execute the hook.\"\"\"\n    if not self.data.get(\"start_last_workfile\"):\n        self.log.info(\"It is set to not start last workfile on start.\")\n        return\n\n    last_workfile = self.data.get(\"last_workfile_path\")\n    if not last_workfile:\n        self.log.warning(\"Last workfile was not collected.\")\n        return\n\n    if not os.path.exists(last_workfile):\n        self.log.info(\"Current context does not have any workfile yet.\")\n        return\n\n    # Add path to workfile to arguments\n    self.launch_context.launch_args.extend([\"-open\", last_workfile])\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_install_qt_bindings.html","title":"pre_install_qt_bindings","text":"<p>Install PySide2 python module to 3dequalizer's python.</p> <p>If 3dequalizer doesn't have PySide2 module installed, it will try to install it.</p> Note <p>This needs to be changed in the future so the UI is decoupled from the host application.</p>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_install_qt_bindings.html#client.ayon_equalizer.hooks.pre_install_qt_bindings.InstallQtBinding","title":"<code>InstallQtBinding</code>","text":"<p>               Bases: <code>PreLaunchHook</code></p> <p>Install Qt binding to 3dequalizer's python packages.</p> Source code in <code>client/ayon_equalizer/hooks/pre_install_qt_bindings.py</code> <pre><code>class InstallQtBinding(PreLaunchHook):\n    \"\"\"Install Qt binding to 3dequalizer's python packages.\"\"\"\n\n    app_groups = (\"equalizer\", \"sdv_3dequalizer\")\n    launch_types = (LaunchTypes.local)\n\n    def execute(self) -&gt; None:\n        \"\"\"Entry point for the hook.\"\"\"\n        try:\n            self._execute()\n        except Exception:  # noqa: BLE001\n            self.log.warning(\n                \"Processing of %s crashed.\",\n                self.__class__.__name__, exc_info=True\n            )\n\n    @staticmethod\n    def _find_python_executable(\n            path_str: str) -&gt; tuple[Union[Path, None], Union[int, None]]:\n        \"\"\"Find python executable in 3de4's directory.\n\n        Args:\n            path_str (str): Path string with \"{version}\" placeholder.\n\n        Returns:\n            valid_path (Path): Path to python executable.\n\n        \"\"\"\n        for version in python_versions:\n            python_dir = Path(path_str.format(version=version))\n            if python_dir.exists():\n                return python_dir, version\n        return None, None\n\n    def _execute(self) -&gt; None:  # noqa: PLR0912, C901\n        \"\"\"Execute the hook.\n\n        Todo:\n            * This method is too complex (PLR0912). It should be refactored\n              to smaller methods.\n\n        \"\"\"\n        platform = system().lower()\n        executable = Path(self.launch_context.executable.executable_path)\n        expected_executable = \"3de4\"\n        if platform == \"windows\":\n            expected_executable += \".exe\"\n\n        if not self.launch_context.env.get(\"TDE4_ROOT\"):\n            if executable.name.lower() != expected_executable:\n                self.log.warning(\n                    \"Executable %s does not lead \"\n                    \"to %s file. \"\n                    \"Can't determine 3dequalizer's python to \"\n                    \"check/install PySide2/PySide6. %s\",\n                    executable.as_posix(), expected_executable,\n                    executable.name\n                )\n                return\n\n            python_path_str = os.path.join(\n                executable.parent.parent.as_posix(),\n                \"sys_data\", \"py3{version}_inst\")\n        else:\n            python_path_str = os.path.join(\n                self.launch_context.env[\"TDE4_ROOT\"],\n                \"sys_data\", \"py3{version}_inst\")\n\n        python_dir, py_version = self._find_python_executable(python_path_str)\n\n        if not python_dir:\n            self.log.warning(\n                \"Couldn't find python executable \"\n                \"for 3de4 in %s\", python_path_str)\n            return\n\n        if platform == \"windows\":\n            python_executable = Path(python_dir) / \"python.exe\"\n        else:\n            python_executable = Path(python_dir) / \"python\"\n            # Check for python with enabled 'pymalloc'\n            if not python_executable.exists():\n                python_executable = Path(python_dir) / f\"python3.{py_version}m\"\n\n        if not python_executable.exists():\n            self.log.warning(\n                \"Couldn't find python executable \"\n                \"for 3de4 %s\", python_executable.as_posix())\n\n            return\n\n        pyside_name = \"PySide6\"\n        if py_version &lt;= MAX_PYSIDE2_PYTHON_VERSION:\n            pyside_name = \"PySide2\"\n\n\n        # Check if PySide2 is installed and skip if yes\n        if self.is_pyside_installed(python_executable, pyside_name):\n            self.log.debug(\n                \"3Dequalizer has already installed %s.\", pyside_name)\n            return\n\n        # Install PySide2/PySide6 in 3de4's python\n        if platform == \"windows\":\n            result = self.install_pyside_windows(python_executable)\n        else:\n            result = self.install_pyside(python_executable, pyside_name)\n\n        if result:\n            self.log.info(\n                \"Successfully installed %s module to 3de4.\", pyside_name)\n        else:\n            self.log.warning(\n                \"Failed to install %s module to 3de4.\", pyside_name)\n\n    def install_pyside_windows(\n            self, python_executable: Path) -&gt; Union[None, int]:\n        \"\"\"Install PySide2 python module to 3de4's python.\n\n        Installation requires administration rights that's why it is required\n        to use \"pywin32\" module which can execute command's and ask for\n        administration rights.\n\n        Note:\n            This is asking for administrative right always, no matter if\n            it is actually needed or not. Unfortunately getting\n            correct permissions for directory on Windows isn't that trivial.\n            You can either use `win32security` module or run `icacls` command\n            in subprocess and parse its output.\n\n        \"\"\"\n        try:\n            import pywintypes\n            import win32con\n            import win32event\n            import win32process\n            from win32comext.shell import shellcon\n            from win32comext.shell.shell import ShellExecuteEx\n        except Exception:  # noqa: BLE001\n            self.log.warning(\n                \"Couldn't import 'pywin32' modules\", exc_info=True)\n            return None\n\n        with contextlib.suppress(pywintypes.error):\n            # Parameters\n            # - use \"-m pip\" as module pip to install PySide2 and argument\n            #   \"--ignore-installed\" is to force install module to 3de4's\n            #   site-packages and make sure it is binary compatible\n            parameters = \"-m pip install --ignore-installed PySide2\"\n\n            # Execute command and ask for administrator's rights\n            process_info = ShellExecuteEx(\n                nShow=win32con.SW_SHOWNORMAL,\n                fMask=shellcon.SEE_MASK_NOCLOSEPROCESS,\n                lpVerb=\"runas\",\n                lpFile=python_executable.as_posix(),\n                lpParameters=parameters,\n                lpDirectory=python_executable.parent.as_posix()\n            )\n            process_handle = process_info[\"hProcess\"]\n            win32event.WaitForSingleObject(\n                process_handle, win32event.INFINITE)\n            return_code = win32process.GetExitCodeProcess(process_handle)\n            return return_code == 0\n\n    def install_pyside(\n            self, python_executable: Path, pyside_name: str) -&gt; int:\n        \"\"\"Install PySide2 python module to 3de4's python.\"\"\"\n        args = [\n            python_executable.as_posix(),\n            \"-m\",\n            \"pip\",\n            \"install\",\n            \"--ignore-installed\",\n            pyside_name,\n        ]\n\n        try:\n            # Parameters\n            # - use \"-m pip\" as module pip to install PySide2/6 and argument\n            #   \"--ignore-installed\" is to force install module to 3de4\n            #   site-packages and make sure it is binary compatible\n\n            process = subprocess.Popen(\n                args, stdout=subprocess.PIPE, universal_newlines=True\n            )\n            process.communicate()\n\n        except PermissionError:\n            self.log.warning(\n                'Permission denied with command: \"%s\".', \" \".join(args),\n                exc_info=True)\n        except OSError as error:\n            self.log.warning(\n                'OS error has occurred: \"%s\".', error, exc_info=True)\n        except subprocess.SubprocessError:\n            pass\n        else:\n            return process.returncode == 0\n\n    @staticmethod\n    def is_pyside_installed(python_executable: Path, pyside_name: str) -&gt; bool:\n        \"\"\"Check if PySide2/6 module is in 3de4 python env.\n\n        Args:\n            python_executable (Path): Path to python executable.\n            pyside_name (str): Name of pyside (to distinguish between PySide2\n                and PySide6).\n\n        Returns:\n            bool: True if PySide2 is installed, False otherwise.\n\n        \"\"\"\n        # Get pip list from 3de4's python executable\n        args = [python_executable.as_posix(), \"-m\", \"pip\", \"list\"]\n        process = subprocess.Popen(args, stdout=subprocess.PIPE)\n        stdout, _ = process.communicate()\n        lines = stdout.decode().split(os.linesep)\n        # Second line contain dashes that define maximum length of module name.\n        #   Second column of dashes define maximum length of module version.\n        package_dashes, *_ = lines[1].split(\" \")\n        package_len = len(package_dashes)\n\n        # Got through printed lines starting at line 3\n        for idx in range(2, len(lines)):\n            line = lines[idx]\n            if not line:\n                continue\n            package_name = line[:package_len].strip()\n            if package_name.lower() == pyside_name.lower():\n                return True\n        return False\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_install_qt_bindings.html#client.ayon_equalizer.hooks.pre_install_qt_bindings.InstallQtBinding.execute","title":"<code>execute()</code>","text":"<p>Entry point for the hook.</p> Source code in <code>client/ayon_equalizer/hooks/pre_install_qt_bindings.py</code> <pre><code>def execute(self) -&gt; None:\n    \"\"\"Entry point for the hook.\"\"\"\n    try:\n        self._execute()\n    except Exception:  # noqa: BLE001\n        self.log.warning(\n            \"Processing of %s crashed.\",\n            self.__class__.__name__, exc_info=True\n        )\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_install_qt_bindings.html#client.ayon_equalizer.hooks.pre_install_qt_bindings.InstallQtBinding.install_pyside","title":"<code>install_pyside(python_executable, pyside_name)</code>","text":"<p>Install PySide2 python module to 3de4's python.</p> Source code in <code>client/ayon_equalizer/hooks/pre_install_qt_bindings.py</code> <pre><code>def install_pyside(\n        self, python_executable: Path, pyside_name: str) -&gt; int:\n    \"\"\"Install PySide2 python module to 3de4's python.\"\"\"\n    args = [\n        python_executable.as_posix(),\n        \"-m\",\n        \"pip\",\n        \"install\",\n        \"--ignore-installed\",\n        pyside_name,\n    ]\n\n    try:\n        # Parameters\n        # - use \"-m pip\" as module pip to install PySide2/6 and argument\n        #   \"--ignore-installed\" is to force install module to 3de4\n        #   site-packages and make sure it is binary compatible\n\n        process = subprocess.Popen(\n            args, stdout=subprocess.PIPE, universal_newlines=True\n        )\n        process.communicate()\n\n    except PermissionError:\n        self.log.warning(\n            'Permission denied with command: \"%s\".', \" \".join(args),\n            exc_info=True)\n    except OSError as error:\n        self.log.warning(\n            'OS error has occurred: \"%s\".', error, exc_info=True)\n    except subprocess.SubprocessError:\n        pass\n    else:\n        return process.returncode == 0\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_install_qt_bindings.html#client.ayon_equalizer.hooks.pre_install_qt_bindings.InstallQtBinding.install_pyside_windows","title":"<code>install_pyside_windows(python_executable)</code>","text":"<p>Install PySide2 python module to 3de4's python.</p> <p>Installation requires administration rights that's why it is required to use \"pywin32\" module which can execute command's and ask for administration rights.</p> Note <p>This is asking for administrative right always, no matter if it is actually needed or not. Unfortunately getting correct permissions for directory on Windows isn't that trivial. You can either use <code>win32security</code> module or run <code>icacls</code> command in subprocess and parse its output.</p> Source code in <code>client/ayon_equalizer/hooks/pre_install_qt_bindings.py</code> <pre><code>def install_pyside_windows(\n        self, python_executable: Path) -&gt; Union[None, int]:\n    \"\"\"Install PySide2 python module to 3de4's python.\n\n    Installation requires administration rights that's why it is required\n    to use \"pywin32\" module which can execute command's and ask for\n    administration rights.\n\n    Note:\n        This is asking for administrative right always, no matter if\n        it is actually needed or not. Unfortunately getting\n        correct permissions for directory on Windows isn't that trivial.\n        You can either use `win32security` module or run `icacls` command\n        in subprocess and parse its output.\n\n    \"\"\"\n    try:\n        import pywintypes\n        import win32con\n        import win32event\n        import win32process\n        from win32comext.shell import shellcon\n        from win32comext.shell.shell import ShellExecuteEx\n    except Exception:  # noqa: BLE001\n        self.log.warning(\n            \"Couldn't import 'pywin32' modules\", exc_info=True)\n        return None\n\n    with contextlib.suppress(pywintypes.error):\n        # Parameters\n        # - use \"-m pip\" as module pip to install PySide2 and argument\n        #   \"--ignore-installed\" is to force install module to 3de4's\n        #   site-packages and make sure it is binary compatible\n        parameters = \"-m pip install --ignore-installed PySide2\"\n\n        # Execute command and ask for administrator's rights\n        process_info = ShellExecuteEx(\n            nShow=win32con.SW_SHOWNORMAL,\n            fMask=shellcon.SEE_MASK_NOCLOSEPROCESS,\n            lpVerb=\"runas\",\n            lpFile=python_executable.as_posix(),\n            lpParameters=parameters,\n            lpDirectory=python_executable.parent.as_posix()\n        )\n        process_handle = process_info[\"hProcess\"]\n        win32event.WaitForSingleObject(\n            process_handle, win32event.INFINITE)\n        return_code = win32process.GetExitCodeProcess(process_handle)\n        return return_code == 0\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/hooks/pre_install_qt_bindings.html#client.ayon_equalizer.hooks.pre_install_qt_bindings.InstallQtBinding.is_pyside_installed","title":"<code>is_pyside_installed(python_executable, pyside_name)</code>  <code>staticmethod</code>","text":"<p>Check if PySide2/6 module is in 3de4 python env.</p> <p>Parameters:</p> Name Type Description Default <code>python_executable</code> <code>Path</code> <p>Path to python executable.</p> required <code>pyside_name</code> <code>str</code> <p>Name of pyside (to distinguish between PySide2 and PySide6).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if PySide2 is installed, False otherwise.</p> Source code in <code>client/ayon_equalizer/hooks/pre_install_qt_bindings.py</code> <pre><code>@staticmethod\ndef is_pyside_installed(python_executable: Path, pyside_name: str) -&gt; bool:\n    \"\"\"Check if PySide2/6 module is in 3de4 python env.\n\n    Args:\n        python_executable (Path): Path to python executable.\n        pyside_name (str): Name of pyside (to distinguish between PySide2\n            and PySide6).\n\n    Returns:\n        bool: True if PySide2 is installed, False otherwise.\n\n    \"\"\"\n    # Get pip list from 3de4's python executable\n    args = [python_executable.as_posix(), \"-m\", \"pip\", \"list\"]\n    process = subprocess.Popen(args, stdout=subprocess.PIPE)\n    stdout, _ = process.communicate()\n    lines = stdout.decode().split(os.linesep)\n    # Second line contain dashes that define maximum length of module name.\n    #   Second column of dashes define maximum length of module version.\n    package_dashes, *_ = lines[1].split(\" \")\n    package_len = len(package_dashes)\n\n    # Got through printed lines starting at line 3\n    for idx in range(2, len(lines)):\n        line = lines[idx]\n        if not line:\n            continue\n        package_name = line[:package_len].strip()\n        if package_name.lower() == pyside_name.lower():\n            return True\n    return False\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/index.html","title":"plugins","text":"<p>Plugins for AYON Equalizer.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/create/index.html","title":"create","text":"<p>Creator plugin for AYON Equalizer.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/create/create_lens_distortion_data.html","title":"create_lens_distortion_data","text":"<p>Create lens distortion data.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/create/create_lens_distortion_data.html#client.ayon_equalizer.plugins.create.create_lens_distortion_data.CreateLensDistortionData","title":"<code>CreateLensDistortionData</code>","text":"<p>               Bases: <code>EqualizerCreator</code></p> <p>Create lens distortion data.</p> Source code in <code>client/ayon_equalizer/plugins/create/create_lens_distortion_data.py</code> <pre><code>class CreateLensDistortionData(EqualizerCreator):\n    \"\"\"Create lens distortion data.\"\"\"\n\n    identifier = \"io.ayon.creators.equalizer.lens_distortion\"\n    label = \"Lens Distortion\"\n    product_type = \"lensDistortion\"\n    icon = \"glasses\"\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/create/create_matchmove.html","title":"create_matchmove","text":"<p>Create Matchmove product.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/create/create_matchmove.html#client.ayon_equalizer.plugins.create.create_matchmove.CreateMatchMove","title":"<code>CreateMatchMove</code>","text":"<p>               Bases: <code>EqualizerCreator</code></p> <p>Create Match Move subset.</p> Source code in <code>client/ayon_equalizer/plugins/create/create_matchmove.py</code> <pre><code>class CreateMatchMove(EqualizerCreator):\n    \"\"\"Create Match Move subset.\"\"\"\n\n    identifier = \"io.ayon.creators.equalizer.matchmove\"\n    label = \"Match Move\"\n    product_type = \"matchmove\"\n    icon = \"camera\"\n\n    def get_instance_attr_defs(self) -&gt; list:\n        \"\"\"Return instance attribute definitions.\"\"\"\n        camera_enum = [\n            {\"value\": \"__all__\", \"label\": \"All Cameras\"},\n            {\"value\": \"__current__\", \"label\": \"Current Camera\"},\n            {\"value\": \"__ref__\", \"label\": \"Reference Cameras\"},\n            {\"value\": \"__seq__\", \"label\": \"Sequence Cameras\"},\n        ]\n        camera_list = tde4.getCameraList()\n        camera_enum.extend(\n            {\"label\": tde4.getCameraName(camera), \"value\": camera}\n            for camera in camera_list\n            if tde4.getCameraEnabledFlag(camera)\n        )\n        # try to get list of models\n        model_enum = [\n            {\"value\": \"__none__\", \"label\": \"No 3D Models At All\"},\n            {\"value\": \"__all__\", \"label\": \"All 3D Models\"},\n        ]\n        point_groups = tde4.getPGroupList()\n        for point_group in point_groups:\n            model_list = tde4.get3DModelList(point_group, 0)\n            model_enum.extend(\n                {\n                    \"label\": tde4.get3DModelName(point_group, model),\n                    \"value\": model,\n                } for model in model_list\n            )\n        return [\n            EnumDef(\"camera_selection\",\n                    items=camera_enum,\n                    default=\"__current__\",\n                    label=\"Camera(s) to publish\",\n                    tooltip=\"Select cameras to publish\"),\n            EnumDef(\"model_selection\",\n                    items=model_enum,\n                    default=\"__none__\",\n                    label=\"Model(s) to publish\",\n                    tooltip=\"Select models to publish\"),\n        ]\n\n    def create(\n            self, product_name: str,\n            instance_data: dict, pre_create_data: dict) -&gt; None:\n        \"\"\"Create Match Move subset.\"\"\"\n        self.log.debug(\"CreateMatchMove.create\")\n        super().create(product_name, instance_data, pre_create_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/create/create_matchmove.html#client.ayon_equalizer.plugins.create.create_matchmove.CreateMatchMove.create","title":"<code>create(product_name, instance_data, pre_create_data)</code>","text":"<p>Create Match Move subset.</p> Source code in <code>client/ayon_equalizer/plugins/create/create_matchmove.py</code> <pre><code>def create(\n        self, product_name: str,\n        instance_data: dict, pre_create_data: dict) -&gt; None:\n    \"\"\"Create Match Move subset.\"\"\"\n    self.log.debug(\"CreateMatchMove.create\")\n    super().create(product_name, instance_data, pre_create_data)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/create/create_matchmove.html#client.ayon_equalizer.plugins.create.create_matchmove.CreateMatchMove.get_instance_attr_defs","title":"<code>get_instance_attr_defs()</code>","text":"<p>Return instance attribute definitions.</p> Source code in <code>client/ayon_equalizer/plugins/create/create_matchmove.py</code> <pre><code>def get_instance_attr_defs(self) -&gt; list:\n    \"\"\"Return instance attribute definitions.\"\"\"\n    camera_enum = [\n        {\"value\": \"__all__\", \"label\": \"All Cameras\"},\n        {\"value\": \"__current__\", \"label\": \"Current Camera\"},\n        {\"value\": \"__ref__\", \"label\": \"Reference Cameras\"},\n        {\"value\": \"__seq__\", \"label\": \"Sequence Cameras\"},\n    ]\n    camera_list = tde4.getCameraList()\n    camera_enum.extend(\n        {\"label\": tde4.getCameraName(camera), \"value\": camera}\n        for camera in camera_list\n        if tde4.getCameraEnabledFlag(camera)\n    )\n    # try to get list of models\n    model_enum = [\n        {\"value\": \"__none__\", \"label\": \"No 3D Models At All\"},\n        {\"value\": \"__all__\", \"label\": \"All 3D Models\"},\n    ]\n    point_groups = tde4.getPGroupList()\n    for point_group in point_groups:\n        model_list = tde4.get3DModelList(point_group, 0)\n        model_enum.extend(\n            {\n                \"label\": tde4.get3DModelName(point_group, model),\n                \"value\": model,\n            } for model in model_list\n        )\n    return [\n        EnumDef(\"camera_selection\",\n                items=camera_enum,\n                default=\"__current__\",\n                label=\"Camera(s) to publish\",\n                tooltip=\"Select cameras to publish\"),\n        EnumDef(\"model_selection\",\n                items=model_enum,\n                default=\"__none__\",\n                label=\"Model(s) to publish\",\n                tooltip=\"Select models to publish\"),\n    ]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/load/index.html","title":"load","text":"<p>Loader plugin for AYON Equalizer.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/load/load_plate.html","title":"load_plate","text":"<p>Loader for image sequences.</p> <p>This loads published sequence to the current camera because this workflow is the most common in production.</p> <p>If current camera is not defined, it will try to use first camera and if there is no camera at all, it will create new one.</p> <p>TODO (antirotor):     * Support for setting handles, calculation frame ranges, EXR       options, etc.     * Add support for color management - at least put correct gamma       to image corrections.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/load/load_plate.html#client.ayon_equalizer.plugins.load.load_plate.LoadPlate","title":"<code>LoadPlate</code>","text":"<p>               Bases: <code>LoaderPlugin</code></p> <p>Load image sequence to the current camera.</p> Source code in <code>client/ayon_equalizer/plugins/load/load_plate.py</code> <pre><code>class LoadPlate(load.LoaderPlugin):\n    \"\"\"Load image sequence to the current camera.\"\"\"\n\n    product_types: ClassVar[list[str]] = [\n        \"imagesequence\",\n        \"review\",\n        \"render\",\n        \"plate\",\n        \"image\",\n        \"online\",\n    ]\n\n    representations: ClassVar[list[str]] = [\"*\"]\n    extensions: ClassVar[list[str]] = [\n        ext.lstrip(\".\") for ext in IMAGE_EXTENSIONS]\n\n    label = \"Load sequence\"\n    order = -10\n    icon = \"code-fork\"\n    color = \"orange\"\n\n    def load(self, context: dict, name: Optional[str] = None,\n             namespace: Optional[str] = None,\n             options: Optional[dict]=None) -&gt; None:\n        \"\"\"Load image sequence to the current camera.\"\"\"\n        repre_entity = context[\"representation\"]\n        version_entity = context[\"version\"]\n        version_attributes = version_entity[\"attrib\"]\n\n        file_path = self.filepath_from_context(context)\n        file_path = self.format_path(file_path, repre_entity)\n\n        camera = tde4.createCamera(\"SEQUENCE\")\n        tde4.setCameraName(camera, name)\n        camera_name = tde4.getCameraName(camera)\n\n        self.log.debug(\"Loading: %s {file_path} into %s{camera_name}\")\n\n        # set the path to sequence on the camera\n        tde4.setCameraPath(camera, file_path)\n\n        # set the sequence attributes star/end/step\n        tde4.setCameraSequenceAttr(\n            camera, int(version_attributes.get(\"frameStart\")),\n            int(version_attributes.get(\"frameEnd\")), 1)\n\n        container = Container(\n            name=name,\n            namespace=camera_name,\n            loader=self.__class__.__name__,\n            representation=str(repre_entity[\"id\"]),\n            objectName=camera_name,\n            version=str(version_entity[\"version\"]),\n            timestamp=time.time_ns()\n        )\n        EqualizerHost.get_host().add_container(container)\n        tde4.updateGUI()\n\n    def update(self, container: dict, context: dict) -&gt; None:\n        \"\"\"Update the image sequence on the current camera.\"\"\"\n        version_entity = context[\"version\"]\n        version_attributes = version_entity[\"attrib\"]\n        repre_entity = context[\"representation\"]\n        camera_list = tde4.getCameraList()\n        try:\n            camera = next(\n                c for c in camera_list if\n                tde4.getCameraName(c) == container[\"namespace\"]\n            )\n        except IndexError:\n            self.log.exception(\n                \"Cannot find camera %s\", container[\"namespace\"])\n            return\n\n        file_path = get_representation_path(repre_entity)\n        file_path = self.format_path(file_path, repre_entity)\n\n        # set the path to sequence on the camera\n        tde4.setCameraPath(camera, file_path)\n\n        # set the sequence attributes star/end/step\n        tde4.setCameraSequenceAttr(\n            camera, int(version_attributes.get(\"frameStart\")),\n            int(version_attributes.get(\"frameEnd\")), 1)\n        self.log.info(\n            \"Updating: %s into %s\",\n            file_path, container[\"namespace\"])\n        container[\"representation\"] = repre_entity[\"id\"]\n        container[\"version\"] = str(version_entity[\"version\"])\n\n        EqualizerHost.get_host().add_container(container)\n        tde4.updateGUI()\n\n    def switch(self, container: dict, context: dict) -&gt; None:\n        \"\"\"Switch the image sequence on the current camera.\"\"\"\n        self.update(container, context)\n\n    @staticmethod\n    def format_path(path: str, representation: dict) -&gt; str:\n        \"\"\"Format file path correctly for single image or sequence.\"\"\"\n        if not os.path.exists(path):\n            msg = f\"Path does not exist: {path}\"\n            raise RuntimeError(msg)\n\n        ext = os.path.splitext(path)[-1]\n\n        is_sequence = bool(representation[\"context\"].get(\"frame\"))\n\n        if not is_sequence:\n            filename = path\n        else:\n            hashes = \"#\" * len(str(representation[\"context\"].get(\"frame\")))\n            filename = re.sub(\n                f\"(.*)\\\\.(\\\\d+){re.escape(ext)}$\",\n                f\"\\\\1.{hashes}{ext}\", path)\n\n            filename = os.path.join(path, filename)\n\n        filename = os.path.normpath(filename)\n        return filename.replace(\"\\\\\", \"/\")\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/load/load_plate.html#client.ayon_equalizer.plugins.load.load_plate.LoadPlate.format_path","title":"<code>format_path(path, representation)</code>  <code>staticmethod</code>","text":"<p>Format file path correctly for single image or sequence.</p> Source code in <code>client/ayon_equalizer/plugins/load/load_plate.py</code> <pre><code>@staticmethod\ndef format_path(path: str, representation: dict) -&gt; str:\n    \"\"\"Format file path correctly for single image or sequence.\"\"\"\n    if not os.path.exists(path):\n        msg = f\"Path does not exist: {path}\"\n        raise RuntimeError(msg)\n\n    ext = os.path.splitext(path)[-1]\n\n    is_sequence = bool(representation[\"context\"].get(\"frame\"))\n\n    if not is_sequence:\n        filename = path\n    else:\n        hashes = \"#\" * len(str(representation[\"context\"].get(\"frame\")))\n        filename = re.sub(\n            f\"(.*)\\\\.(\\\\d+){re.escape(ext)}$\",\n            f\"\\\\1.{hashes}{ext}\", path)\n\n        filename = os.path.join(path, filename)\n\n    filename = os.path.normpath(filename)\n    return filename.replace(\"\\\\\", \"/\")\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/load/load_plate.html#client.ayon_equalizer.plugins.load.load_plate.LoadPlate.load","title":"<code>load(context, name=None, namespace=None, options=None)</code>","text":"<p>Load image sequence to the current camera.</p> Source code in <code>client/ayon_equalizer/plugins/load/load_plate.py</code> <pre><code>def load(self, context: dict, name: Optional[str] = None,\n         namespace: Optional[str] = None,\n         options: Optional[dict]=None) -&gt; None:\n    \"\"\"Load image sequence to the current camera.\"\"\"\n    repre_entity = context[\"representation\"]\n    version_entity = context[\"version\"]\n    version_attributes = version_entity[\"attrib\"]\n\n    file_path = self.filepath_from_context(context)\n    file_path = self.format_path(file_path, repre_entity)\n\n    camera = tde4.createCamera(\"SEQUENCE\")\n    tde4.setCameraName(camera, name)\n    camera_name = tde4.getCameraName(camera)\n\n    self.log.debug(\"Loading: %s {file_path} into %s{camera_name}\")\n\n    # set the path to sequence on the camera\n    tde4.setCameraPath(camera, file_path)\n\n    # set the sequence attributes star/end/step\n    tde4.setCameraSequenceAttr(\n        camera, int(version_attributes.get(\"frameStart\")),\n        int(version_attributes.get(\"frameEnd\")), 1)\n\n    container = Container(\n        name=name,\n        namespace=camera_name,\n        loader=self.__class__.__name__,\n        representation=str(repre_entity[\"id\"]),\n        objectName=camera_name,\n        version=str(version_entity[\"version\"]),\n        timestamp=time.time_ns()\n    )\n    EqualizerHost.get_host().add_container(container)\n    tde4.updateGUI()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/load/load_plate.html#client.ayon_equalizer.plugins.load.load_plate.LoadPlate.switch","title":"<code>switch(container, context)</code>","text":"<p>Switch the image sequence on the current camera.</p> Source code in <code>client/ayon_equalizer/plugins/load/load_plate.py</code> <pre><code>def switch(self, container: dict, context: dict) -&gt; None:\n    \"\"\"Switch the image sequence on the current camera.\"\"\"\n    self.update(container, context)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/load/load_plate.html#client.ayon_equalizer.plugins.load.load_plate.LoadPlate.update","title":"<code>update(container, context)</code>","text":"<p>Update the image sequence on the current camera.</p> Source code in <code>client/ayon_equalizer/plugins/load/load_plate.py</code> <pre><code>def update(self, container: dict, context: dict) -&gt; None:\n    \"\"\"Update the image sequence on the current camera.\"\"\"\n    version_entity = context[\"version\"]\n    version_attributes = version_entity[\"attrib\"]\n    repre_entity = context[\"representation\"]\n    camera_list = tde4.getCameraList()\n    try:\n        camera = next(\n            c for c in camera_list if\n            tde4.getCameraName(c) == container[\"namespace\"]\n        )\n    except IndexError:\n        self.log.exception(\n            \"Cannot find camera %s\", container[\"namespace\"])\n        return\n\n    file_path = get_representation_path(repre_entity)\n    file_path = self.format_path(file_path, repre_entity)\n\n    # set the path to sequence on the camera\n    tde4.setCameraPath(camera, file_path)\n\n    # set the sequence attributes star/end/step\n    tde4.setCameraSequenceAttr(\n        camera, int(version_attributes.get(\"frameStart\")),\n        int(version_attributes.get(\"frameEnd\")), 1)\n    self.log.info(\n        \"Updating: %s into %s\",\n        file_path, container[\"namespace\"])\n    container[\"representation\"] = repre_entity[\"id\"]\n    container[\"version\"] = str(version_entity[\"version\"])\n\n    EqualizerHost.get_host().add_container(container)\n    tde4.updateGUI()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/index.html","title":"publish","text":"<p>Pyblish plugins for 3DEqualizer AYON Addon.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_3de_installation_dir.html","title":"collect_3de_installation_dir","text":"<p>Collect camera data from the scene.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_3de_installation_dir.html#client.ayon_equalizer.plugins.publish.collect_3de_installation_dir.Collect3DE4InstallationDir","title":"<code>Collect3DE4InstallationDir</code>","text":"<p>               Bases: <code>ContextPlugin</code></p> <p>Collect camera data from the scene.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_3de_installation_dir.py</code> <pre><code>class Collect3DE4InstallationDir(pyblish.api.ContextPlugin):\n    \"\"\"Collect camera data from the scene.\"\"\"\n\n    order = pyblish.api.CollectorOrder\n    hosts: ClassVar[list] = [\"equalizer\"]\n    label = \"Collect 3Dequalizer directory\"\n\n    def process(self, context: pyblish.api.Context) -&gt; None:\n        \"\"\"Collect installation directory.\"\"\"\n        tde4_path = Path(tde4.get3DEInstallPath())\n        context.data[\"tde4_path\"] = tde4_path\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_3de_installation_dir.html#client.ayon_equalizer.plugins.publish.collect_3de_installation_dir.Collect3DE4InstallationDir.process","title":"<code>process(context)</code>","text":"<p>Collect installation directory.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_3de_installation_dir.py</code> <pre><code>def process(self, context: pyblish.api.Context) -&gt; None:\n    \"\"\"Collect installation directory.\"\"\"\n    tde4_path = Path(tde4.get3DEInstallPath())\n    context.data[\"tde4_path\"] = tde4_path\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_3de_version.html","title":"collect_3de_version","text":"<p>Collect camera data from the scene.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_3de_version.html#client.ayon_equalizer.plugins.publish.collect_3de_version.Collect3DE4Version","title":"<code>Collect3DE4Version</code>","text":"<p>               Bases: <code>ContextPlugin</code></p> <p>Collect camera data from the scene.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_3de_version.py</code> <pre><code>class Collect3DE4Version(pyblish.api.ContextPlugin):\n    \"\"\"Collect camera data from the scene.\"\"\"\n\n    order = pyblish.api.CollectorOrder\n    hosts: ClassVar[list] = [\"equalizer\"]\n    label = \"Collect 3Dequalizer version\"\n\n    def process(self, context: pyblish.api.Context) -&gt; None:\n        \"\"\"Collect 3DEqualizer version.\"\"\"\n        match = re.search(\n            r\"3DEqualizer4 Release (?P&lt;major&gt;\\d+).(?P&lt;minor&gt;\\d+)\",\n            tde4.get3DEVersion())\n        if not match[\"major\"] or not match[\"minor\"]:\n            error_msg = \"Failed to extract 3DEqualizer version\"\n            raise ValueError(error_msg)\n\n        version = Version(\n            major=int(match[\"major\"]),\n            minor=int(match[\"minor\"]))\n\n        context.data[\"tde4_version\"] = version\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_3de_version.html#client.ayon_equalizer.plugins.publish.collect_3de_version.Collect3DE4Version.process","title":"<code>process(context)</code>","text":"<p>Collect 3DEqualizer version.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_3de_version.py</code> <pre><code>def process(self, context: pyblish.api.Context) -&gt; None:\n    \"\"\"Collect 3DEqualizer version.\"\"\"\n    match = re.search(\n        r\"3DEqualizer4 Release (?P&lt;major&gt;\\d+).(?P&lt;minor&gt;\\d+)\",\n        tde4.get3DEVersion())\n    if not match[\"major\"] or not match[\"minor\"]:\n        error_msg = \"Failed to extract 3DEqualizer version\"\n        raise ValueError(error_msg)\n\n    version = Version(\n        major=int(match[\"major\"]),\n        minor=int(match[\"minor\"]))\n\n    context.data[\"tde4_version\"] = version\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_3de_version.html#client.ayon_equalizer.plugins.publish.collect_3de_version.Version","title":"<code>Version</code>","text":"<p>               Bases: <code>NamedTuple</code></p> <p>3DEqualizer version.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_3de_version.py</code> <pre><code>class Version(NamedTuple):\n    \"\"\"3DEqualizer version.\"\"\"\n\n    major: int\n    minor: int\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_camera_data.html","title":"collect_camera_data","text":"<p>Collect camera data from the scene.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_camera_data.html#client.ayon_equalizer.plugins.publish.collect_camera_data.CollectCameraData","title":"<code>CollectCameraData</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>Collect camera data from the scene.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_camera_data.py</code> <pre><code>class CollectCameraData(pyblish.api.InstancePlugin):\n    \"\"\"Collect camera data from the scene.\"\"\"\n\n    order = pyblish.api.CollectorOrder\n    families: ClassVar[list] = [\"matchmove\"]\n    hosts: ClassVar[list] = [\"equalizer\"]\n    label = \"Collect camera data\"\n\n    def process(self, instance: pyblish.api.Instance) -&gt; None:\n        \"\"\"Collect Camera data from 3DE.\n\n        Handle camera selection. Possible values are:\n\n           - ``__current__`` - current camera\n           - ``__ref__`` - reference cameras\n           - ``__seq__`` - sequence cameras\n           - ``__all__`` - all cameras\n           - ``camera_id`` - specific camera\n\n        \"\"\"\n        try:\n            camera_sel = instance.data[\"creator_attributes\"][\"camera_selection\"]  # noqa: E501\n        except KeyError:\n            self.log.warning(\"No camera defined\")\n            return\n\n        if camera_sel == \"__all__\":\n            cameras = tde4.getCameraList()\n        elif camera_sel == \"__current__\":\n            cameras = [tde4.getCurrentCamera()]\n        elif camera_sel in [\"__ref__\", \"__seq__\"]:\n            cameras = [\n                c for c in tde4.getCameraList()\n                if tde4.getCameraType(c) == \"REF_FRAME\"\n            ]\n        else:\n            if camera_sel not in tde4.getCameraList():\n                self.log.warning(\"Invalid camera found\")\n                return\n            cameras = [camera_sel]\n\n        data = []\n\n        for camera in cameras:\n            camera_name = tde4.getCameraName(camera)\n            enabled = tde4.getCameraEnabledFlag(camera)\n            # calculation range\n            c_range_start, c_range_end = tde4.getCameraCalculationRange(\n                camera)\n            p_range_start, p_range_end = tde4.getCameraPlaybackRange(camera)\n            fov = tde4.getCameraFOV(camera)\n            fps = tde4.getCameraFPS(camera)\n            # focal length is time based, so lets skip it for now\n            # focal_length = tde4.getCameraFocalLength(camera, frame)\n            path = tde4.getCameraPath(camera)\n\n            camera_data = {\n                \"name\": camera_name,\n                \"id\": camera,\n                \"enabled\": enabled,\n                \"calculation_range\": (c_range_start, c_range_end),\n                \"playback_range\": (p_range_start, p_range_end),\n                \"fov\": fov,\n                \"fps\": fps,\n                # \"focal_length\": focal_length,\n                \"path\": path\n            }\n            data.append(camera_data)\n        instance.data[\"cameras\"] = data\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_camera_data.html#client.ayon_equalizer.plugins.publish.collect_camera_data.CollectCameraData.process","title":"<code>process(instance)</code>","text":"<p>Collect Camera data from 3DE.</p> <p>Handle camera selection. Possible values are:</p> <ul> <li><code>__current__</code> - current camera</li> <li><code>__ref__</code> - reference cameras</li> <li><code>__seq__</code> - sequence cameras</li> <li><code>__all__</code> - all cameras</li> <li><code>camera_id</code> - specific camera</li> </ul> Source code in <code>client/ayon_equalizer/plugins/publish/collect_camera_data.py</code> <pre><code>def process(self, instance: pyblish.api.Instance) -&gt; None:\n    \"\"\"Collect Camera data from 3DE.\n\n    Handle camera selection. Possible values are:\n\n       - ``__current__`` - current camera\n       - ``__ref__`` - reference cameras\n       - ``__seq__`` - sequence cameras\n       - ``__all__`` - all cameras\n       - ``camera_id`` - specific camera\n\n    \"\"\"\n    try:\n        camera_sel = instance.data[\"creator_attributes\"][\"camera_selection\"]  # noqa: E501\n    except KeyError:\n        self.log.warning(\"No camera defined\")\n        return\n\n    if camera_sel == \"__all__\":\n        cameras = tde4.getCameraList()\n    elif camera_sel == \"__current__\":\n        cameras = [tde4.getCurrentCamera()]\n    elif camera_sel in [\"__ref__\", \"__seq__\"]:\n        cameras = [\n            c for c in tde4.getCameraList()\n            if tde4.getCameraType(c) == \"REF_FRAME\"\n        ]\n    else:\n        if camera_sel not in tde4.getCameraList():\n            self.log.warning(\"Invalid camera found\")\n            return\n        cameras = [camera_sel]\n\n    data = []\n\n    for camera in cameras:\n        camera_name = tde4.getCameraName(camera)\n        enabled = tde4.getCameraEnabledFlag(camera)\n        # calculation range\n        c_range_start, c_range_end = tde4.getCameraCalculationRange(\n            camera)\n        p_range_start, p_range_end = tde4.getCameraPlaybackRange(camera)\n        fov = tde4.getCameraFOV(camera)\n        fps = tde4.getCameraFPS(camera)\n        # focal length is time based, so lets skip it for now\n        # focal_length = tde4.getCameraFocalLength(camera, frame)\n        path = tde4.getCameraPath(camera)\n\n        camera_data = {\n            \"name\": camera_name,\n            \"id\": camera,\n            \"enabled\": enabled,\n            \"calculation_range\": (c_range_start, c_range_end),\n            \"playback_range\": (p_range_start, p_range_end),\n            \"fov\": fov,\n            \"fps\": fps,\n            # \"focal_length\": focal_length,\n            \"path\": path\n        }\n        data.append(camera_data)\n    instance.data[\"cameras\"] = data\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_workfile.html","title":"collect_workfile","text":"<p>Collect camera data from the scene.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_workfile.html#client.ayon_equalizer.plugins.publish.collect_workfile.CollectWorkfile","title":"<code>CollectWorkfile</code>","text":"<p>               Bases: <code>ContextPlugin</code></p> <p>Collect camera data from the scene.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_workfile.py</code> <pre><code>class CollectWorkfile(pyblish.api.ContextPlugin):\n    \"\"\"Collect camera data from the scene.\"\"\"\n\n    order = pyblish.api.CollectorOrder\n    hosts: ClassVar[list] = [\"equalizer\"]\n    label = \"Collect Workfile\"\n\n    def process(self, context: pyblish.api.Context) -&gt; None:\n        \"\"\"Collect 3DE project as a workfile.\"\"\"\n        context.data[\"currentFile\"] = tde4.getProjectPath()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/collect_workfile.html#client.ayon_equalizer.plugins.publish.collect_workfile.CollectWorkfile.process","title":"<code>process(context)</code>","text":"<p>Collect 3DE project as a workfile.</p> Source code in <code>client/ayon_equalizer/plugins/publish/collect_workfile.py</code> <pre><code>def process(self, context: pyblish.api.Context) -&gt; None:\n    \"\"\"Collect 3DE project as a workfile.\"\"\"\n    context.data[\"currentFile\"] = tde4.getProjectPath()\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_lens_distortion_nuke.html","title":"extract_lens_distortion_nuke","text":"<p>Extract Nuke Lens Distortion data from 3DEqualizer.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_lens_distortion_nuke.html#client.ayon_equalizer.plugins.publish.extract_lens_distortion_nuke.ExtractLensDistortionNuke","title":"<code>ExtractLensDistortionNuke</code>","text":"<p>               Bases: <code>Extractor</code>, <code>OptionalPyblishPluginMixin</code></p> <p>Extract Nuke Lens Distortion data.</p> <p>Unfortunately built-in export script from 3DEqualizer is bound to its UI, and it is not possible to call it directly from Python. Because of that, we are executing the script in the same way as artist would do it, but we are patching the UI to silence it and to avoid any user interaction.</p> <p>TODO: Utilize attributes defined in ExtractScriptBase</p> Source code in <code>client/ayon_equalizer/plugins/publish/extract_lens_distortion_nuke.py</code> <pre><code>class ExtractLensDistortionNuke(publish.Extractor,\n                                OptionalPyblishPluginMixin):\n    \"\"\"Extract Nuke Lens Distortion data.\n\n    Unfortunately built-in export script from 3DEqualizer is bound to its UI,\n    and it is not possible to call it directly from Python. Because of that,\n    we are executing the script in the same way as artist would do it, but\n    we are patching the UI to silence it and to avoid any user interaction.\n\n    TODO: Utilize attributes defined in ExtractScriptBase\n    \"\"\"\n\n    label = \"Extract Lens Distortion Nuke node\"\n    families: ClassVar[list] = [\"lensDistortion\"]\n    hosts: ClassVar[list] = [\"equalizer\"]\n\n    order = pyblish.api.ExtractorOrder\n\n    def process(self, instance: pyblish.api.Instance) -&gt; None:\n        \"\"\"Extract Nuke Lens Distortion script from 3DEqualizer.\"\"\"\n        if not self.is_active(instance.data):\n            return\n\n        cam = tde4.getCurrentCamera()\n        offset = tde4.getCameraFrameOffset(cam) - 1\n        staging_dir = self.staging_dir(instance)\n        file_path = Path(staging_dir) / \"nuke_ld_export.nk\"\n        attr_data = self.get_attr_values_from_data(instance.data)\n\n        # these patched methods are used to silence 3DEqualizer UI:\n        def patched_getWidgetValue(_, key: str) -&gt; str:    # noqa: N802, ANN001\n            \"\"\"Return value for given key in widget.\"\"\"\n            return attr_data[\"fovMode\"] if key == \"option_menu_fov_mode\" else \"\"  # noqa: E501\n\n        # import export script from 3DEqualizer\n        exporter_path = instance.context.data[\"tde4_path\"] / \"sys_data\" / \"py_scripts\" / \"export_nuke_LD_3DE4_Lens_Distortion_Node.py\"  # noqa: E501\n        self.log.debug(\"Importing %s\", exporter_path.as_posix())\n        exporter = import_filepath(exporter_path.as_posix())\n        with patch(\"tde4.getWidgetValue\", patched_getWidgetValue):\n                exporter.exportNukeDewarpNode(\n                    cam, offset, file_path.as_posix())\n\n        # create representation data\n        if \"representations\" not in instance.data:\n            instance.data[\"representations\"] = []\n\n        representation = {\n            \"name\": \"lensDistortion\",\n            \"ext\": \"nk\",\n            \"files\": file_path.name,\n            \"stagingDir\": staging_dir,\n        }\n        self.log.debug(\"output: %s\", file_path.as_posix())\n        instance.data[\"representations\"].append(representation)\n\n    @classmethod\n    def get_attribute_defs(cls) -&gt; list:\n        \"\"\"Return instance attribute definitions.\"\"\"\n        return [\n            *super().get_attribute_defs(),\n            EnumDef(\"fovMode\",\n                    label=\"FOV Mode\",\n                    items=[\n                        {\"value\": \"1\", \"label\": \"legacy\"},\n                        {\"value\": \"2\", \"label\": \"new (v8+)\"}],\n                    tooltip=\"FOV mode (legacy or new)\",\n                    default=\"legacy\"),\n        ]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_lens_distortion_nuke.html#client.ayon_equalizer.plugins.publish.extract_lens_distortion_nuke.ExtractLensDistortionNuke.get_attribute_defs","title":"<code>get_attribute_defs()</code>  <code>classmethod</code>","text":"<p>Return instance attribute definitions.</p> Source code in <code>client/ayon_equalizer/plugins/publish/extract_lens_distortion_nuke.py</code> <pre><code>@classmethod\ndef get_attribute_defs(cls) -&gt; list:\n    \"\"\"Return instance attribute definitions.\"\"\"\n    return [\n        *super().get_attribute_defs(),\n        EnumDef(\"fovMode\",\n                label=\"FOV Mode\",\n                items=[\n                    {\"value\": \"1\", \"label\": \"legacy\"},\n                    {\"value\": \"2\", \"label\": \"new (v8+)\"}],\n                tooltip=\"FOV mode (legacy or new)\",\n                default=\"legacy\"),\n    ]\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_lens_distortion_nuke.html#client.ayon_equalizer.plugins.publish.extract_lens_distortion_nuke.ExtractLensDistortionNuke.process","title":"<code>process(instance)</code>","text":"<p>Extract Nuke Lens Distortion script from 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/plugins/publish/extract_lens_distortion_nuke.py</code> <pre><code>def process(self, instance: pyblish.api.Instance) -&gt; None:\n    \"\"\"Extract Nuke Lens Distortion script from 3DEqualizer.\"\"\"\n    if not self.is_active(instance.data):\n        return\n\n    cam = tde4.getCurrentCamera()\n    offset = tde4.getCameraFrameOffset(cam) - 1\n    staging_dir = self.staging_dir(instance)\n    file_path = Path(staging_dir) / \"nuke_ld_export.nk\"\n    attr_data = self.get_attr_values_from_data(instance.data)\n\n    # these patched methods are used to silence 3DEqualizer UI:\n    def patched_getWidgetValue(_, key: str) -&gt; str:    # noqa: N802, ANN001\n        \"\"\"Return value for given key in widget.\"\"\"\n        return attr_data[\"fovMode\"] if key == \"option_menu_fov_mode\" else \"\"  # noqa: E501\n\n    # import export script from 3DEqualizer\n    exporter_path = instance.context.data[\"tde4_path\"] / \"sys_data\" / \"py_scripts\" / \"export_nuke_LD_3DE4_Lens_Distortion_Node.py\"  # noqa: E501\n    self.log.debug(\"Importing %s\", exporter_path.as_posix())\n    exporter = import_filepath(exporter_path.as_posix())\n    with patch(\"tde4.getWidgetValue\", patched_getWidgetValue):\n            exporter.exportNukeDewarpNode(\n                cam, offset, file_path.as_posix())\n\n    # create representation data\n    if \"representations\" not in instance.data:\n        instance.data[\"representations\"] = []\n\n    representation = {\n        \"name\": \"lensDistortion\",\n        \"ext\": \"nk\",\n        \"files\": file_path.name,\n        \"stagingDir\": staging_dir,\n    }\n    self.log.debug(\"output: %s\", file_path.as_posix())\n    instance.data[\"representations\"].append(representation)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_matchmove_script_maya.html","title":"extract_matchmove_script_maya","text":"<p>Extract project for Maya.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_matchmove_script_maya.html#client.ayon_equalizer.plugins.publish.extract_matchmove_script_maya.ExtractMatchmoveScriptMaya","title":"<code>ExtractMatchmoveScriptMaya</code>","text":"<p>               Bases: <code>Extractor</code>, <code>ExtractScriptBase</code>, <code>OptionalPyblishPluginMixin</code></p> <p>Extract Maya MEL script for matchmove.</p> <p>This is using built-in export script from 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/plugins/publish/extract_matchmove_script_maya.py</code> <pre><code>class ExtractMatchmoveScriptMaya(publish.Extractor,\n                                 ExtractScriptBase,\n                                 OptionalPyblishPluginMixin):\n    \"\"\"Extract Maya MEL script for matchmove.\n\n    This is using built-in export script from 3DEqualizer.\n    \"\"\"\n\n    label = \"Extract Maya Script\"\n    families: ClassVar[list] = [\"matchmove\"]\n    hosts: ClassVar[list] = [\"equalizer\"]\n    optional = True\n\n    order = pyblish.api.ExtractorOrder\n\n    # intentionally ignoring complexity warning (PLR0915 and PLR0912) because\n    # of the nature of the export scripts in 3DEqualizer.\n    def process(self, instance: pyblish.api.Instance) -&gt; None:  # noqa: C901,PLR0915,PLR0912\n        \"\"\"Extract Maya script from 3DEqualizer.\n\n        This method is using export script shipped with 3DEqualizer to\n        maintain as much compatibility as possible. Instead of invoking it\n        from the UI, it calls directly the function that is doing the export.\n        For that it needs to pass some data that are collected in 3dequalizer\n        from the UI, so we need to determine them from the instance itself and\n        from the state of the project.\n\n        \"\"\"\n        if not self.is_active(instance.data):\n            return\n        attr_data = self.get_attr_values_from_data(instance.data)\n\n        # import maya export script from 3DEqualizer\n        exporter_path = instance.context.data[\"tde4_path\"] / \"sys_data\" / \"py_scripts\" / \"export_maya.py\"  # noqa: E501\n        self.log.debug(\"Importing %s\", exporter_path.as_posix())\n        exporter = import_filepath(exporter_path.as_posix())\n\n        # get camera point group\n        point_group = None\n        point_groups = tde4.getPGroupList()\n        for pg in point_groups:\n            if tde4.getPGroupType(pg) == \"CAMERA\":\n                point_group = pg\n                break\n        else:\n            # this should never happen as it should be handled by validator\n            error_msg = \"No camera point group found.\"\n            raise KnownPublishError(error_msg)\n\n        # Here we subtract 1 because 3DE is computing the offset with an offset\n        offset = tde4.getCameraFrameOffset(tde4.getCurrentCamera()) - 1\n        overscan_width = attr_data[\"overscan_percent_width\"] / 100.0\n        overscan_height = attr_data[\"overscan_percent_height\"] / 100.0\n\n        staging_dir = self.staging_dir(instance)\n\n        unit_scales = {\n            \"mm\": 10.0,  # cm -&gt; mm\n            \"cm\": 1.0,  # cm -&gt; cm\n            \"m\": 0.01,  # cm -&gt; m\n            \"in\": 0.393701,  # cm -&gt; in\n            \"ft\": 0.0328084,  # cm -&gt; ft\n            \"yd\": 0.0109361  # cm -&gt; yd\n        }\n        scale_factor = unit_scales[attr_data[\"units\"]]\n        model_selection_enum = instance.data[\"creator_attributes\"][\"model_selection\"]  # noqa: E501\n\n        with maintained_model_selection():\n            # handle model selection\n            # We are passing it to existing function that is expecting\n            # this value to be an index of selection type.\n            # 1 - No models\n            # 2 - Selected models\n            # 3 - All models\n            if model_selection_enum == \"__all__\":\n                model_selection = 3\n            elif model_selection_enum == \"__none__\":\n                model_selection = 1\n            else:\n                # take model from instance and set its selection flag on\n                # turn off all others\n                model_selection = 2\n                point_groups = tde4.getPGroupList()\n                for point_group in point_groups:\n                    model_list = tde4.get3DModelList(point_group, 0)\n                    if model_selection_enum in model_list:\n                        model_selection = 2\n                        tde4.set3DModelSelectionFlag(\n                            point_group, instance.data[\"model_selection\"], 1)\n                        break\n\n                    # clear all other model selections\n                    for model in model_list:\n                        tde4.set3DModelSelectionFlag(point_group, model, 0)\n\n            file_path = Path(staging_dir) / \"maya_export\"\n            if instance.context.data.get(\"tde4_version\"):\n                self.log.debug(\"Exporting to: %s\", file_path.as_posix())\n\n            # create representation data\n            if \"representations\" not in instance.data:\n                instance.data[\"representations\"] = []\n\n            if instance.context.data[\"tde4_version\"].major == EQUALIZER_7:\n                status = exporter._maya_export_mel_file(  # noqa: SLF001\n                    f\"{file_path.as_posix()}.mel\",\n                    point_group,\n                    [\n                        c[\"id\"] for c in instance.data[\"cameras\"]\n                        if c[\"enabled\"]\n                    ],\n                    model_selection,\n                    overscan_width,\n                    overscan_height,\n                    1 if attr_data[\"export_uv_textures\"] else 0,\n                    scale_factor,\n                    offset,\n                    1 if attr_data[\"hide_reference_frame\"] else 0,\n                )\n\n                representation = {\n                    \"name\": \"mel\",\n                    \"ext\": \"mel\",\n                    \"files\": f\"{file_path.name}.mel\",\n                    \"stagingDir\": staging_dir,\n                }\n            elif instance.context.data[\"tde4_version\"].major == EQUALIZER_8:\n                exporter.script_version = \"4.7\"\n                status, npoly_warning = exporter._maya_export_python_file(  # noqa: SLF001\n                    file_path.as_posix(),  # staging path,\n                    point_group,  # camera point group,\n                    [\n                        c[\"id\"] for c in instance.data[\"cameras\"]\n                        if c[\"enabled\"]\n                    ],\n                    model_selection,\n                    overscan_width,\n                    overscan_height,\n                    1 if attr_data[\"export_uv_textures\"] else 0,\n                    scale_factor,\n                    offset,\n                    1 if attr_data[\"hide_reference_frame\"] else 0,\n                    # scene_name\n                    maya_valid_name(f\"{instance.data['name']}_GRP\"),\n                    1 if attr_data[\"point_sets\"] else 0,\n                    1 if attr_data[\"export_2p5d\"] else 0)\n                if npoly_warning:\n                    self.log.warning(\"npoly warning: %s\", npoly_warning)\n                representation = {\n                    \"name\": \"py\",\n                    \"ext\": \"py\",\n                    \"files\": f\"{file_path.name}.py\",\n                    \"stagingDir\": staging_dir,\n                }\n\n        if status != 1:\n            # for EM102\n            err_msg = f\"Export failed {status}\"\n            raise KnownPublishError(err_msg)\n\n        self.log.debug(\"output: %s\", file_path.as_posix())\n        instance.data[\"representations\"].append(representation)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_matchmove_script_maya.html#client.ayon_equalizer.plugins.publish.extract_matchmove_script_maya.ExtractMatchmoveScriptMaya.process","title":"<code>process(instance)</code>","text":"<p>Extract Maya script from 3DEqualizer.</p> <p>This method is using export script shipped with 3DEqualizer to maintain as much compatibility as possible. Instead of invoking it from the UI, it calls directly the function that is doing the export. For that it needs to pass some data that are collected in 3dequalizer from the UI, so we need to determine them from the instance itself and from the state of the project.</p> Source code in <code>client/ayon_equalizer/plugins/publish/extract_matchmove_script_maya.py</code> <pre><code>def process(self, instance: pyblish.api.Instance) -&gt; None:  # noqa: C901,PLR0915,PLR0912\n    \"\"\"Extract Maya script from 3DEqualizer.\n\n    This method is using export script shipped with 3DEqualizer to\n    maintain as much compatibility as possible. Instead of invoking it\n    from the UI, it calls directly the function that is doing the export.\n    For that it needs to pass some data that are collected in 3dequalizer\n    from the UI, so we need to determine them from the instance itself and\n    from the state of the project.\n\n    \"\"\"\n    if not self.is_active(instance.data):\n        return\n    attr_data = self.get_attr_values_from_data(instance.data)\n\n    # import maya export script from 3DEqualizer\n    exporter_path = instance.context.data[\"tde4_path\"] / \"sys_data\" / \"py_scripts\" / \"export_maya.py\"  # noqa: E501\n    self.log.debug(\"Importing %s\", exporter_path.as_posix())\n    exporter = import_filepath(exporter_path.as_posix())\n\n    # get camera point group\n    point_group = None\n    point_groups = tde4.getPGroupList()\n    for pg in point_groups:\n        if tde4.getPGroupType(pg) == \"CAMERA\":\n            point_group = pg\n            break\n    else:\n        # this should never happen as it should be handled by validator\n        error_msg = \"No camera point group found.\"\n        raise KnownPublishError(error_msg)\n\n    # Here we subtract 1 because 3DE is computing the offset with an offset\n    offset = tde4.getCameraFrameOffset(tde4.getCurrentCamera()) - 1\n    overscan_width = attr_data[\"overscan_percent_width\"] / 100.0\n    overscan_height = attr_data[\"overscan_percent_height\"] / 100.0\n\n    staging_dir = self.staging_dir(instance)\n\n    unit_scales = {\n        \"mm\": 10.0,  # cm -&gt; mm\n        \"cm\": 1.0,  # cm -&gt; cm\n        \"m\": 0.01,  # cm -&gt; m\n        \"in\": 0.393701,  # cm -&gt; in\n        \"ft\": 0.0328084,  # cm -&gt; ft\n        \"yd\": 0.0109361  # cm -&gt; yd\n    }\n    scale_factor = unit_scales[attr_data[\"units\"]]\n    model_selection_enum = instance.data[\"creator_attributes\"][\"model_selection\"]  # noqa: E501\n\n    with maintained_model_selection():\n        # handle model selection\n        # We are passing it to existing function that is expecting\n        # this value to be an index of selection type.\n        # 1 - No models\n        # 2 - Selected models\n        # 3 - All models\n        if model_selection_enum == \"__all__\":\n            model_selection = 3\n        elif model_selection_enum == \"__none__\":\n            model_selection = 1\n        else:\n            # take model from instance and set its selection flag on\n            # turn off all others\n            model_selection = 2\n            point_groups = tde4.getPGroupList()\n            for point_group in point_groups:\n                model_list = tde4.get3DModelList(point_group, 0)\n                if model_selection_enum in model_list:\n                    model_selection = 2\n                    tde4.set3DModelSelectionFlag(\n                        point_group, instance.data[\"model_selection\"], 1)\n                    break\n\n                # clear all other model selections\n                for model in model_list:\n                    tde4.set3DModelSelectionFlag(point_group, model, 0)\n\n        file_path = Path(staging_dir) / \"maya_export\"\n        if instance.context.data.get(\"tde4_version\"):\n            self.log.debug(\"Exporting to: %s\", file_path.as_posix())\n\n        # create representation data\n        if \"representations\" not in instance.data:\n            instance.data[\"representations\"] = []\n\n        if instance.context.data[\"tde4_version\"].major == EQUALIZER_7:\n            status = exporter._maya_export_mel_file(  # noqa: SLF001\n                f\"{file_path.as_posix()}.mel\",\n                point_group,\n                [\n                    c[\"id\"] for c in instance.data[\"cameras\"]\n                    if c[\"enabled\"]\n                ],\n                model_selection,\n                overscan_width,\n                overscan_height,\n                1 if attr_data[\"export_uv_textures\"] else 0,\n                scale_factor,\n                offset,\n                1 if attr_data[\"hide_reference_frame\"] else 0,\n            )\n\n            representation = {\n                \"name\": \"mel\",\n                \"ext\": \"mel\",\n                \"files\": f\"{file_path.name}.mel\",\n                \"stagingDir\": staging_dir,\n            }\n        elif instance.context.data[\"tde4_version\"].major == EQUALIZER_8:\n            exporter.script_version = \"4.7\"\n            status, npoly_warning = exporter._maya_export_python_file(  # noqa: SLF001\n                file_path.as_posix(),  # staging path,\n                point_group,  # camera point group,\n                [\n                    c[\"id\"] for c in instance.data[\"cameras\"]\n                    if c[\"enabled\"]\n                ],\n                model_selection,\n                overscan_width,\n                overscan_height,\n                1 if attr_data[\"export_uv_textures\"] else 0,\n                scale_factor,\n                offset,\n                1 if attr_data[\"hide_reference_frame\"] else 0,\n                # scene_name\n                maya_valid_name(f\"{instance.data['name']}_GRP\"),\n                1 if attr_data[\"point_sets\"] else 0,\n                1 if attr_data[\"export_2p5d\"] else 0)\n            if npoly_warning:\n                self.log.warning(\"npoly warning: %s\", npoly_warning)\n            representation = {\n                \"name\": \"py\",\n                \"ext\": \"py\",\n                \"files\": f\"{file_path.name}.py\",\n                \"stagingDir\": staging_dir,\n            }\n\n    if status != 1:\n        # for EM102\n        err_msg = f\"Export failed {status}\"\n        raise KnownPublishError(err_msg)\n\n    self.log.debug(\"output: %s\", file_path.as_posix())\n    instance.data[\"representations\"].append(representation)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_matchmove_script_nuke.html","title":"extract_matchmove_script_nuke","text":"<p>Extract project for Nuke.</p> <p>Because original extractor script is intermingled with UI, we had to resort to this hacky solution. This is monkey-patching 3DEqualizer UI to silence it during the export. Advantage is that it is still using \"vanilla\" built-in export script, so it should be more compatible with future versions of the software.</p> <p>TODO: This can be refactored even better, split to multiple methods, etc.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_matchmove_script_nuke.html#client.ayon_equalizer.plugins.publish.extract_matchmove_script_nuke.ExtractMatchmoveScriptNuke","title":"<code>ExtractMatchmoveScriptNuke</code>","text":"<p>               Bases: <code>Extractor</code>, <code>OptionalPyblishPluginMixin</code></p> <p>Extract Nuke script for matchmove.</p> <p>Unfortunately built-in export script from 3DEqualizer is bound to its UI, and it is not possible to call it directly from Python. Because of that, we are executing the script in the same way as artist would do it, but we are patching the UI to silence it and to avoid any user interaction.</p> <p>TODO: Utilize attributes defined in ExtractScriptBase</p> Source code in <code>client/ayon_equalizer/plugins/publish/extract_matchmove_script_nuke.py</code> <pre><code>class ExtractMatchmoveScriptNuke(publish.Extractor,\n                                 OptionalPyblishPluginMixin):\n    \"\"\"Extract Nuke script for matchmove.\n\n    Unfortunately built-in export script from 3DEqualizer is bound to its UI,\n    and it is not possible to call it directly from Python. Because of that,\n    we are executing the script in the same way as artist would do it, but\n    we are patching the UI to silence it and to avoid any user interaction.\n\n    TODO: Utilize attributes defined in ExtractScriptBase\n    \"\"\"\n\n    label = \"Extract Nuke Script\"\n    families: ClassVar[list] = [\"matchmove\"]\n    hosts: ClassVar[list] = [\"equalizer\"]\n    optional = True\n\n    order = pyblish.api.ExtractorOrder\n\n    def process(self, instance: pyblish.api.Instance) -&gt; None:\n        \"\"\"Extract Nuke script from 3DEqualizer.\"\"\"\n        if not self.is_active(instance.data):\n            return\n\n        cam = tde4.getCurrentCamera()\n\n        staging_dir = self.staging_dir(instance)\n        file_path = Path(staging_dir) / \"nuke_export.nk\"\n\n        # these patched methods are used to silence 3DEqualizer UI:\n        def patched_getWidgetValue(_, key: str) -&gt; str:  # noqa: N802, ANN001\n            \"\"\"Return value for given key in widget.\"\"\"\n            if key == \"file_browser\":\n                return file_path.as_posix()\n            return tde4.getCameraFrameOffset(cam) - 1 \\\n                if key == \"startframe_field\" else \"\"\n\n        # This is simulating artist clicking on \"OK\" button\n        # in the export dialog.\n        def patched_postCustomRequester(*args, **kwargs) -&gt; int:  # noqa: N802, ANN002, ANN003, ARG001\n            return 1\n\n        # This is silencing success/error message after the script\n        # is exported.\n        def patched_postQuestionRequester(*args, **kwargs) -&gt; None:  # noqa: N802, ANN002, ANN003, ARG001\n            return None\n\n        # import maya export script from 3DEqualizer\n        exporter_path = instance.context.data[\"tde4_path\"] / \"sys_data\" / \"py_scripts\" / \"export_nuke.py\"  # noqa: E501\n        self.log.debug(\"Patching 3dequalizer requester objects ...\")\n\n        with patch(\"tde4.getWidgetValue\", patched_getWidgetValue), \\\n                 patch(\"tde4.postCustomRequester\", patched_postCustomRequester), \\\n                 patch(\"tde4.postQuestionRequester\", patched_postQuestionRequester):  # noqa: E501\n            with exporter_path.open() as f:\n                script = f.read()\n            self.log.debug(\"Importing %s\", exporter_path.as_posix())\n            exec(script)  # noqa: S102\n\n        # create representation data\n        if \"representations\" not in instance.data:\n            instance.data[\"representations\"] = []\n\n        representation = {\n            \"name\": \"nk\",\n            \"ext\": \"nk\",\n            \"files\": file_path.name,\n            \"stagingDir\": staging_dir,\n        }\n        self.log.debug(\"output: %s\", file_path.as_posix())\n        instance.data[\"representations\"].append(representation)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/extract_matchmove_script_nuke.html#client.ayon_equalizer.plugins.publish.extract_matchmove_script_nuke.ExtractMatchmoveScriptNuke.process","title":"<code>process(instance)</code>","text":"<p>Extract Nuke script from 3DEqualizer.</p> Source code in <code>client/ayon_equalizer/plugins/publish/extract_matchmove_script_nuke.py</code> <pre><code>def process(self, instance: pyblish.api.Instance) -&gt; None:\n    \"\"\"Extract Nuke script from 3DEqualizer.\"\"\"\n    if not self.is_active(instance.data):\n        return\n\n    cam = tde4.getCurrentCamera()\n\n    staging_dir = self.staging_dir(instance)\n    file_path = Path(staging_dir) / \"nuke_export.nk\"\n\n    # these patched methods are used to silence 3DEqualizer UI:\n    def patched_getWidgetValue(_, key: str) -&gt; str:  # noqa: N802, ANN001\n        \"\"\"Return value for given key in widget.\"\"\"\n        if key == \"file_browser\":\n            return file_path.as_posix()\n        return tde4.getCameraFrameOffset(cam) - 1 \\\n            if key == \"startframe_field\" else \"\"\n\n    # This is simulating artist clicking on \"OK\" button\n    # in the export dialog.\n    def patched_postCustomRequester(*args, **kwargs) -&gt; int:  # noqa: N802, ANN002, ANN003, ARG001\n        return 1\n\n    # This is silencing success/error message after the script\n    # is exported.\n    def patched_postQuestionRequester(*args, **kwargs) -&gt; None:  # noqa: N802, ANN002, ANN003, ARG001\n        return None\n\n    # import maya export script from 3DEqualizer\n    exporter_path = instance.context.data[\"tde4_path\"] / \"sys_data\" / \"py_scripts\" / \"export_nuke.py\"  # noqa: E501\n    self.log.debug(\"Patching 3dequalizer requester objects ...\")\n\n    with patch(\"tde4.getWidgetValue\", patched_getWidgetValue), \\\n             patch(\"tde4.postCustomRequester\", patched_postCustomRequester), \\\n             patch(\"tde4.postQuestionRequester\", patched_postQuestionRequester):  # noqa: E501\n        with exporter_path.open() as f:\n            script = f.read()\n        self.log.debug(\"Importing %s\", exporter_path.as_posix())\n        exec(script)  # noqa: S102\n\n    # create representation data\n    if \"representations\" not in instance.data:\n        instance.data[\"representations\"] = []\n\n    representation = {\n        \"name\": \"nk\",\n        \"ext\": \"nk\",\n        \"files\": file_path.name,\n        \"stagingDir\": staging_dir,\n    }\n    self.log.debug(\"output: %s\", file_path.as_posix())\n    instance.data[\"representations\"].append(representation)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/validate_camera_pointgroup.html","title":"validate_camera_pointgroup","text":"<p>Validate Camera Point Group.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/validate_camera_pointgroup.html#client.ayon_equalizer.plugins.publish.validate_camera_pointgroup.ValidateCameraPoingroup","title":"<code>ValidateCameraPoingroup</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>Validate Camera Point Group.</p> <p>There must be a camera point group in the scene.</p> Source code in <code>client/ayon_equalizer/plugins/publish/validate_camera_pointgroup.py</code> <pre><code>class ValidateCameraPoingroup(pyblish.api.InstancePlugin):\n    \"\"\"Validate Camera Point Group.\n\n    There must be a camera point group in the scene.\n    \"\"\"\n\n    order = ValidateContentsOrder\n    hosts: ClassVar[list] = [\"equalizer\"]\n    families: ClassVar[list] = [\"matchmove\"]\n    label = \"Validate Camera Point Group\"\n\n    def process(self, _: pyblish.api.Instance) -&gt; None:\n        \"\"\"Process the validation.\"\"\"\n        valid = any(\n            tde4.getPGroupType(point_group) == \"CAMERA\"\n            for point_group in tde4.getPGroupList()\n        )\n        if not valid:\n            error_msg = \"Missing Camera Point Group\"\n            raise PublishValidationError(error_msg)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/validate_camera_pointgroup.html#client.ayon_equalizer.plugins.publish.validate_camera_pointgroup.ValidateCameraPoingroup.process","title":"<code>process(_)</code>","text":"<p>Process the validation.</p> Source code in <code>client/ayon_equalizer/plugins/publish/validate_camera_pointgroup.py</code> <pre><code>def process(self, _: pyblish.api.Instance) -&gt; None:\n    \"\"\"Process the validation.\"\"\"\n    valid = any(\n        tde4.getPGroupType(point_group) == \"CAMERA\"\n        for point_group in tde4.getPGroupList()\n    )\n    if not valid:\n        error_msg = \"Missing Camera Point Group\"\n        raise PublishValidationError(error_msg)\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/validate_instance_camera_data.html","title":"validate_instance_camera_data","text":"<p>Plugin to validate if instance has camera data.</p>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/validate_instance_camera_data.html#client.ayon_equalizer.plugins.publish.validate_instance_camera_data.ValidateInstanceCameraData","title":"<code>ValidateInstanceCameraData</code>","text":"<p>               Bases: <code>InstancePlugin</code></p> <p>Check if instance has camera data.</p> <p>There might not be any camera associated with the instance and without it, the instance is not valid.</p> Source code in <code>client/ayon_equalizer/plugins/publish/validate_instance_camera_data.py</code> <pre><code>class ValidateInstanceCameraData(pyblish.api.InstancePlugin):\n    \"\"\"Check if instance has camera data.\n\n    There might not be any camera associated with the instance\n    and without it, the instance is not valid.\n    \"\"\"\n\n    order = ValidateContentsOrder\n    hosts: ClassVar[list] = [\"equalizer\"]\n    families: ClassVar[list] = [\"matchmove\"]\n    label = \"Validate Instance has Camera data\"\n\n    def process(self, instance: pyblish.api.Instance) -&gt; None:\n        \"\"\"Process the validation.\"\"\"\n        try:\n            _ = instance.data[\"cameras\"]\n        except KeyError as e:\n            error_msg = \"No camera data found\"\n            raise PublishValidationError(error_msg) from e\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/plugins/publish/validate_instance_camera_data.html#client.ayon_equalizer.plugins.publish.validate_instance_camera_data.ValidateInstanceCameraData.process","title":"<code>process(instance)</code>","text":"<p>Process the validation.</p> Source code in <code>client/ayon_equalizer/plugins/publish/validate_instance_camera_data.py</code> <pre><code>def process(self, instance: pyblish.api.Instance) -&gt; None:\n    \"\"\"Process the validation.\"\"\"\n    try:\n        _ = instance.data[\"cameras\"]\n    except KeyError as e:\n        error_msg = \"No camera data found\"\n        raise PublishValidationError(error_msg) from e\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/startup/index.html","title":"startup","text":"<p>Startup scripts for AYON in 3DEqualizer.</p>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_create.html","title":"ayon_create","text":"<p>Define Create menu item.</p>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_create.html#client.ayon_equalizer.startup.ayon_create.install_3de_host","title":"<code>install_3de_host()</code>","text":"<p>Install 3DEqualizer host.</p> Source code in <code>client/ayon_equalizer/startup/ayon_create.py</code> <pre><code>def install_3de_host() -&gt; None:\n    \"\"\"Install 3DEqualizer host.\"\"\"\n    print(\"Running AYON integration ...\")  # noqa: T201\n    install_host(EqualizerHost())\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_load.html","title":"ayon_load","text":"<p>Define Load menu item.</p>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_load.html#client.ayon_equalizer.startup.ayon_load.install_3de_host","title":"<code>install_3de_host()</code>","text":"<p>Install 3DEqualizer host.</p> Source code in <code>client/ayon_equalizer/startup/ayon_load.py</code> <pre><code>def install_3de_host() -&gt; None:\n    \"\"\"Install 3DEqualizer host.\"\"\"\n    print(\"Running AYON integration ...\")  # noqa: T201\n    install_host(EqualizerHost())\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_manage.html","title":"ayon_manage","text":"<p>Define Manage menu item.</p>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_manage.html#client.ayon_equalizer.startup.ayon_manage.install_3de_host","title":"<code>install_3de_host()</code>","text":"<p>Install 3DEqualizer host.</p> Source code in <code>client/ayon_equalizer/startup/ayon_manage.py</code> <pre><code>def install_3de_host() -&gt; None:\n    \"\"\"Install 3DEqualizer host.\"\"\"\n    print(\"Running AYON integration ...\")  # noqa: T201\n    install_host(EqualizerHost())\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_publish.html","title":"ayon_publish","text":"<p>Define Publish menu item.</p>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_publish.html#client.ayon_equalizer.startup.ayon_publish.install_3de_host","title":"<code>install_3de_host()</code>","text":"<p>Install 3DEqualizer host.</p> Source code in <code>client/ayon_equalizer/startup/ayon_publish.py</code> <pre><code>def install_3de_host() -&gt; None:\n    \"\"\"Install 3DEqualizer host.\"\"\"\n    print(\"Running AYON integration ...\")  # noqa: T201\n    install_host(EqualizerHost())\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_workfile.html","title":"ayon_workfile","text":"<p>Define Workfile menu item.</p>"},{"location":"autoapi/client/ayon_equalizer/startup/ayon_workfile.html#client.ayon_equalizer.startup.ayon_workfile.install_3de_host","title":"<code>install_3de_host()</code>","text":"<p>Install 3DEqualizer host.</p> Source code in <code>client/ayon_equalizer/startup/ayon_workfile.py</code> <pre><code>def install_3de_host() -&gt; None:\n    \"\"\"Install 3DEqualizer host.\"\"\"\n    print(\"Running AYON integration ...\")  # noqa: T201\n    install_host(EqualizerHost())\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/index.html","title":"test","text":"<p>Test package.</p>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html","title":"test_plugins","text":"<p>3DEqualizer plugin tests.</p> <p>These test need to be run in 3DEqualizer.</p>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.Container","title":"<code>Container</code>  <code>dataclass</code>","text":"<p>Container dataclass.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>@dataclass\nclass Container:\n    \"\"\"Container dataclass.\"\"\"\n\n    name: str = None\n    id: str = AYON_CONTAINER_ID\n    namespace: str = \"\"\n    loader: str = None\n    representation: str = None\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.Tde4Mock","title":"<code>Tde4Mock</code>","text":"<p>Simple class to mock few 3dequalizer functions.</p> <p>Just to run the test outside the host itself.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>class Tde4Mock:\n    \"\"\"Simple class to mock few 3dequalizer functions.\n\n    Just to run the test outside the host itself.\n    \"\"\"\n\n    _notes = \"\"\n\n    def isProjectUpToDate(self) -&gt; bool:  # noqa: N802\n        \"\"\"Mock function to check if project is up to date.\"\"\"\n        return True\n\n    def setProjectNotes(self, notes: str) -&gt; None:  # noqa: N802\n        \"\"\"Mock function to set project notes.\"\"\"\n        self._notes = notes\n\n    def getProjectNotes(self) -&gt; str:  # noqa: N802\n        \"\"\"Mock function to get project notes.\"\"\"\n        return self._notes\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.Tde4Mock.getProjectNotes","title":"<code>getProjectNotes()</code>","text":"<p>Mock function to get project notes.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def getProjectNotes(self) -&gt; str:  # noqa: N802\n    \"\"\"Mock function to get project notes.\"\"\"\n    return self._notes\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.Tde4Mock.isProjectUpToDate","title":"<code>isProjectUpToDate()</code>","text":"<p>Mock function to check if project is up to date.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def isProjectUpToDate(self) -&gt; bool:  # noqa: N802\n    \"\"\"Mock function to check if project is up to date.\"\"\"\n    return True\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.Tde4Mock.setProjectNotes","title":"<code>setProjectNotes(notes)</code>","text":"<p>Mock function to set project notes.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def setProjectNotes(self, notes: str) -&gt; None:  # noqa: N802\n    \"\"\"Mock function to set project notes.\"\"\"\n    self._notes = notes\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.TestEqualizer","title":"<code>TestEqualizer</code>","text":"<p>               Bases: <code>TestCase</code></p> <p>Test 3DEqualizer plugin.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>class TestEqualizer(unittest.TestCase):\n    \"\"\"Test 3DEqualizer plugin.\"\"\"\n\n    def test_context_data(self) -&gt; None:\n        \"\"\"Test context data.\"\"\"\n        # ensure empty project notest\n\n        data = get_context_data()\n        assert data == {}, \"context data is not empty\"  # noqa: S101\n\n        # add container\n        add_container(\n            Container(name=\"test\", representation=\"test_A\")\n        )\n\n        assert len(get_containers()) == 1, \"container not added\"  # noqa: S101\n        assert get_containers()[0][\"name\"] == \"test\",\\\n            \"container name is not correct\"  # noqa: S101\n\n        # add another container\n        add_container(\n            Container(name=\"test2\", representation=\"test_B\")\n        )\n\n        assert len(get_containers()) == 2, \"container not added\"  # noqa: S101,PLR2004\n        assert get_containers()[1][\"name\"] == \"test2\",\\\n            \"container name is not correct\"  # noqa: S101\n\n        # update container\n        add_container(\n            Container(name=\"test2\", representation=\"test_C\")\n        )\n        assert len(get_containers()) == 2, \"container not updated\"  # noqa: S101,PLR2004\n        assert get_containers()[1][\"representation\"] == \"test_C\",\\\n            \"container name is not correct\"  # noqa: S101\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.TestEqualizer.test_context_data","title":"<code>test_context_data()</code>","text":"<p>Test context data.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def test_context_data(self) -&gt; None:\n    \"\"\"Test context data.\"\"\"\n    # ensure empty project notest\n\n    data = get_context_data()\n    assert data == {}, \"context data is not empty\"  # noqa: S101\n\n    # add container\n    add_container(\n        Container(name=\"test\", representation=\"test_A\")\n    )\n\n    assert len(get_containers()) == 1, \"container not added\"  # noqa: S101\n    assert get_containers()[0][\"name\"] == \"test\",\\\n        \"container name is not correct\"  # noqa: S101\n\n    # add another container\n    add_container(\n        Container(name=\"test2\", representation=\"test_B\")\n    )\n\n    assert len(get_containers()) == 2, \"container not added\"  # noqa: S101,PLR2004\n    assert get_containers()[1][\"name\"] == \"test2\",\\\n        \"container name is not correct\"  # noqa: S101\n\n    # update container\n    add_container(\n        Container(name=\"test2\", representation=\"test_C\")\n    )\n    assert len(get_containers()) == 2, \"container not updated\"  # noqa: S101,PLR2004\n    assert get_containers()[1][\"representation\"] == \"test_C\",\\\n        \"container name is not correct\"  # noqa: S101\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.add_container","title":"<code>add_container(container)</code>","text":"<p>Add container to context data.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def add_container(container: Container) -&gt; None:\n    \"\"\"Add container to context data.\"\"\"\n    context_data = get_context_data()\n    containers = get_context_data().get(\"containers\", [])\n\n    for _container in containers:\n        if _container[\"name\"] == container.name and _container[\"namespace\"] == container.namespace:  # noqa: E501\n            containers.remove(_container)\n            break\n\n    containers.append(container)\n\n    context_data[\"containers\"] = containers\n    update_context_data(context_data, {})\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.get_containers","title":"<code>get_containers()</code>","text":"<p>Get containers from context data.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def get_containers() -&gt; list:\n    \"\"\"Get containers from context data.\"\"\"\n    return get_context_data().get(\"containers\", [])\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.get_context_data","title":"<code>get_context_data()</code>","text":"<p>Get context data from project notes.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def get_context_data() -&gt; dict:\n    \"\"\"Get context data from project notes.\"\"\"\n    m = re.search(CONTEXT_REGEX, tde4.getProjectNotes())\n    return json.loads(m[\"context\"]) if m else {}\n</code></pre>"},{"location":"autoapi/client/ayon_equalizer/test/test_plugins.html#client.ayon_equalizer.test.test_plugins.update_context_data","title":"<code>update_context_data(data, _)</code>","text":"<p>Update context data in project notes.</p> Source code in <code>client/ayon_equalizer/test/test_plugins.py</code> <pre><code>def update_context_data(data: dict, _: dict) -&gt; None:\n    \"\"\"Update context data in project notes.\"\"\"\n    m = re.search(CONTEXT_REGEX, tde4.getProjectNotes())\n    if not m:\n        tde4.setProjectNotes(\"AYON_CONTEXT::::AYON_CONTEXT_END\")\n    update = json.dumps(data, indent=4)\n    tde4.setProjectNotes(\n        re.sub(\n            CONTEXT_REGEX,\n            f\"AYON_CONTEXT::{update}::AYON_CONTEXT_END\",\n            tde4.getProjectNotes()\n        )\n    )\n</code></pre>"},{"location":"autoapi/server/index.html","title":"server","text":"<p>3DEqualizer server addon.</p>"},{"location":"autoapi/server/index.html#server.EqualizerAddon","title":"<code>EqualizerAddon</code>","text":"<p>               Bases: <code>BaseServerAddon</code></p> <p>3DEqualizer server addon.</p> Source code in <code>server/__init__.py</code> <pre><code>class EqualizerAddon(BaseServerAddon):\n    \"\"\"3DEqualizer server addon.\"\"\"\n\n    name = \"equalizer\"\n    title = \"3DEqualizer\"\n\n    settings_model: EqualizerSettings = EqualizerSettings\n</code></pre>"},{"location":"autoapi/server/settings/index.html","title":"settings","text":"<p>Settings module for the server package.</p>"},{"location":"autoapi/server/settings/index.html#server.settings.EqualizerSettings","title":"<code>EqualizerSettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>3DEqualizer Addon Settings.</p> Source code in <code>server/settings/main.py</code> <pre><code>class EqualizerSettings(BaseSettingsModel):\n    \"\"\"3DEqualizer Addon Settings.\"\"\"\n\n    heartbeat_interval: int = SettingsField(\n        500, title=\"Heartbeat Interval\",\n        description=(\n            \"The interval in milliseconds to pass\"\n            \"control to 3D Equalizer. Can affect\"\n            \"responsiveness of the application.\")\n        )\n\n    create: EqualizerCreatorPlugins = SettingsField(\n        default_factory=EqualizerCreatorPlugins,\n        title=\"Creator plugins\"\n    )\n</code></pre>"},{"location":"autoapi/server/settings/creator_plugins.html","title":"creator_plugins","text":"<p>Creator settings.</p>"},{"location":"autoapi/server/settings/creator_plugins.html#server.settings.creator_plugins.CreateMatchMoveModel","title":"<code>CreateMatchMoveModel</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Matchmove creator settings.</p> Source code in <code>server/settings/creator_plugins.py</code> <pre><code>class CreateMatchMoveModel(BaseSettingsModel):\n    \"\"\"Matchmove creator settings.\"\"\"\n\n    enabled: bool = SettingsField(default=True, title=\"Enabled\")\n    default_variants: list[str] = SettingsField(\n        [\n            \"CameraTrack\",\n            \"ObjectTrack\",\n            \"PointTrack\",\n            \"Stabilize\",\n            \"SurveyTrack\",\n            \"UserTrack\",\n        ], title=\"Default Variants\")\n</code></pre>"},{"location":"autoapi/server/settings/creator_plugins.html#server.settings.creator_plugins.EqualizerCreatorPlugins","title":"<code>EqualizerCreatorPlugins</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>Creator plugins settings.</p> Source code in <code>server/settings/creator_plugins.py</code> <pre><code>class EqualizerCreatorPlugins(BaseSettingsModel):\n    \"\"\"Creator plugins settings.\"\"\"\n\n    CreateMatchMove: CreateMatchMoveModel = SettingsField(\n        default_factory=CreateMatchMoveModel,\n        title=\"Create Match Move data\"\n    )\n</code></pre>"},{"location":"autoapi/server/settings/main.html","title":"main","text":"<p>Settings for the 3DEqualizer Addon.</p>"},{"location":"autoapi/server/settings/main.html#server.settings.main.EqualizerSettings","title":"<code>EqualizerSettings</code>","text":"<p>               Bases: <code>BaseSettingsModel</code></p> <p>3DEqualizer Addon Settings.</p> Source code in <code>server/settings/main.py</code> <pre><code>class EqualizerSettings(BaseSettingsModel):\n    \"\"\"3DEqualizer Addon Settings.\"\"\"\n\n    heartbeat_interval: int = SettingsField(\n        500, title=\"Heartbeat Interval\",\n        description=(\n            \"The interval in milliseconds to pass\"\n            \"control to 3D Equalizer. Can affect\"\n            \"responsiveness of the application.\")\n        )\n\n    create: EqualizerCreatorPlugins = SettingsField(\n        default_factory=EqualizerCreatorPlugins,\n        title=\"Creator plugins\"\n    )\n</code></pre>"}]}